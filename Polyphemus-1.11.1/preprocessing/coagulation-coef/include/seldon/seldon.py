# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_seldon', [dirname(__file__)])
        except ImportError:
            import _seldon
            return _seldon
        if fp is not None:
            try:
                _mod = imp.load_module('_seldon', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _seldon = swig_import_helper()
    del swig_import_helper
else:
    import _seldon
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_Error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_Error
    __del__ = lambda self : None;
    def What(self): return _seldon.Error_What(self)
    def CoutWhat(self): return _seldon.Error_CoutWhat(self)
Error_swigregister = _seldon.Error_swigregister
Error_swigregister(Error)

class WrongArgument(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongArgument, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongArgument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_WrongArgument(*args)
        try: self.this.append(this)
        except: self.this = this
    def What(self): return _seldon.WrongArgument_What(self)
    __swig_destroy__ = _seldon.delete_WrongArgument
    __del__ = lambda self : None;
WrongArgument_swigregister = _seldon.WrongArgument_swigregister
WrongArgument_swigregister(WrongArgument)

class NoMemory(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMemory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_NoMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_NoMemory
    __del__ = lambda self : None;
NoMemory_swigregister = _seldon.NoMemory_swigregister
NoMemory_swigregister(NoMemory)

class WrongDim(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongDim, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongDim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_WrongDim(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_WrongDim
    __del__ = lambda self : None;
WrongDim_swigregister = _seldon.WrongDim_swigregister
WrongDim_swigregister(WrongDim)

class WrongIndex(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_WrongIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_WrongIndex
    __del__ = lambda self : None;
WrongIndex_swigregister = _seldon.WrongIndex_swigregister
WrongIndex_swigregister(WrongIndex)

class WrongRow(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongRow, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongRow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_WrongRow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_WrongRow
    __del__ = lambda self : None;
WrongRow_swigregister = _seldon.WrongRow_swigregister
WrongRow_swigregister(WrongRow)

class WrongCol(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongCol, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongCol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_WrongCol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_WrongCol
    __del__ = lambda self : None;
WrongCol_swigregister = _seldon.WrongCol_swigregister
WrongCol_swigregister(WrongCol)

class IOError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_IOError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_IOError
    __del__ = lambda self : None;
IOError_swigregister = _seldon.IOError_swigregister
IOError_swigregister(IOError)

class LapackError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LapackError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LapackError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_LapackError(*args)
        try: self.this.append(this)
        except: self.this = this
    def What(self): return _seldon.LapackError_What(self)
    __swig_destroy__ = _seldon.delete_LapackError
    __del__ = lambda self : None;
LapackError_swigregister = _seldon.LapackError_swigregister
LapackError_swigregister(LapackError)

class ColMajor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColMajor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColMajor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColMajor_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColMajor_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColMajor_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColMajor_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColMajor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColMajor
    __del__ = lambda self : None;
ColMajor_swigregister = _seldon.ColMajor_swigregister
ColMajor_swigregister(ColMajor)

def ColMajor_GetFirst(*args):
  return _seldon.ColMajor_GetFirst(*args)
ColMajor_GetFirst = _seldon.ColMajor_GetFirst

def ColMajor_GetSecond(*args):
  return _seldon.ColMajor_GetSecond(*args)
ColMajor_GetSecond = _seldon.ColMajor_GetSecond

class RowMajor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowMajor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowMajor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowMajor_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowMajor_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowMajor_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowMajor_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowMajor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowMajor
    __del__ = lambda self : None;
RowMajor_swigregister = _seldon.RowMajor_swigregister
RowMajor_swigregister(RowMajor)

def RowMajor_GetFirst(*args):
  return _seldon.RowMajor_GetFirst(*args)
RowMajor_GetFirst = _seldon.RowMajor_GetFirst

def RowMajor_GetSecond(*args):
  return _seldon.RowMajor_GetSecond(*args)
RowMajor_GetSecond = _seldon.RowMajor_GetSecond

class ColSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColSparse
    __del__ = lambda self : None;
ColSparse_swigregister = _seldon.ColSparse_swigregister
ColSparse_swigregister(ColSparse)

def ColSparse_GetFirst(*args):
  return _seldon.ColSparse_GetFirst(*args)
ColSparse_GetFirst = _seldon.ColSparse_GetFirst

def ColSparse_GetSecond(*args):
  return _seldon.ColSparse_GetSecond(*args)
ColSparse_GetSecond = _seldon.ColSparse_GetSecond

class RowSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowSparse
    __del__ = lambda self : None;
RowSparse_swigregister = _seldon.RowSparse_swigregister
RowSparse_swigregister(RowSparse)

def RowSparse_GetFirst(*args):
  return _seldon.RowSparse_GetFirst(*args)
RowSparse_GetFirst = _seldon.RowSparse_GetFirst

def RowSparse_GetSecond(*args):
  return _seldon.RowSparse_GetSecond(*args)
RowSparse_GetSecond = _seldon.RowSparse_GetSecond

class ColComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColComplexSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColComplexSparse
    __del__ = lambda self : None;
ColComplexSparse_swigregister = _seldon.ColComplexSparse_swigregister
ColComplexSparse_swigregister(ColComplexSparse)

def ColComplexSparse_GetFirst(*args):
  return _seldon.ColComplexSparse_GetFirst(*args)
ColComplexSparse_GetFirst = _seldon.ColComplexSparse_GetFirst

def ColComplexSparse_GetSecond(*args):
  return _seldon.ColComplexSparse_GetSecond(*args)
ColComplexSparse_GetSecond = _seldon.ColComplexSparse_GetSecond

class RowComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowComplexSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowComplexSparse
    __del__ = lambda self : None;
RowComplexSparse_swigregister = _seldon.RowComplexSparse_swigregister
RowComplexSparse_swigregister(RowComplexSparse)

def RowComplexSparse_GetFirst(*args):
  return _seldon.RowComplexSparse_GetFirst(*args)
RowComplexSparse_GetFirst = _seldon.RowComplexSparse_GetFirst

def RowComplexSparse_GetSecond(*args):
  return _seldon.RowComplexSparse_GetSecond(*args)
RowComplexSparse_GetSecond = _seldon.RowComplexSparse_GetSecond

class ColSymSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColSymSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColSymSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColSymSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColSymSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColSymSparse
    __del__ = lambda self : None;
ColSymSparse_swigregister = _seldon.ColSymSparse_swigregister
ColSymSparse_swigregister(ColSymSparse)

def ColSymSparse_GetFirst(*args):
  return _seldon.ColSymSparse_GetFirst(*args)
ColSymSparse_GetFirst = _seldon.ColSymSparse_GetFirst

def ColSymSparse_GetSecond(*args):
  return _seldon.ColSymSparse_GetSecond(*args)
ColSymSparse_GetSecond = _seldon.ColSymSparse_GetSecond

class RowSymSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowSymSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowSymSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowSymSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowSymSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowSymSparse
    __del__ = lambda self : None;
RowSymSparse_swigregister = _seldon.RowSymSparse_swigregister
RowSymSparse_swigregister(RowSymSparse)

def RowSymSparse_GetFirst(*args):
  return _seldon.RowSymSparse_GetFirst(*args)
RowSymSparse_GetFirst = _seldon.RowSymSparse_GetFirst

def RowSymSparse_GetSecond(*args):
  return _seldon.RowSymSparse_GetSecond(*args)
RowSymSparse_GetSecond = _seldon.RowSymSparse_GetSecond

class ColSymComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColSymComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColSymComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColSymComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColSymComplexSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColSymComplexSparse
    __del__ = lambda self : None;
ColSymComplexSparse_swigregister = _seldon.ColSymComplexSparse_swigregister
ColSymComplexSparse_swigregister(ColSymComplexSparse)

def ColSymComplexSparse_GetFirst(*args):
  return _seldon.ColSymComplexSparse_GetFirst(*args)
ColSymComplexSparse_GetFirst = _seldon.ColSymComplexSparse_GetFirst

def ColSymComplexSparse_GetSecond(*args):
  return _seldon.ColSymComplexSparse_GetSecond(*args)
ColSymComplexSparse_GetSecond = _seldon.ColSymComplexSparse_GetSecond

class RowSymComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowSymComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowSymComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowSymComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowSymComplexSparse_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowSymComplexSparse
    __del__ = lambda self : None;
RowSymComplexSparse_swigregister = _seldon.RowSymComplexSparse_swigregister
RowSymComplexSparse_swigregister(RowSymComplexSparse)

def RowSymComplexSparse_GetFirst(*args):
  return _seldon.RowSymComplexSparse_GetFirst(*args)
RowSymComplexSparse_GetFirst = _seldon.RowSymComplexSparse_GetFirst

def RowSymComplexSparse_GetSecond(*args):
  return _seldon.RowSymComplexSparse_GetSecond(*args)
RowSymComplexSparse_GetSecond = _seldon.RowSymComplexSparse_GetSecond

class ArrayRowSparse(RowSparse):
    __swig_setmethods__ = {}
    for _s in [RowSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayRowSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayRowSparse
    __del__ = lambda self : None;
ArrayRowSparse_swigregister = _seldon.ArrayRowSparse_swigregister
ArrayRowSparse_swigregister(ArrayRowSparse)

class ArrayColSparse(ColSparse):
    __swig_setmethods__ = {}
    for _s in [ColSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayColSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayColSparse
    __del__ = lambda self : None;
ArrayColSparse_swigregister = _seldon.ArrayColSparse_swigregister
ArrayColSparse_swigregister(ArrayColSparse)

class ArrayRowSymSparse(RowSymSparse):
    __swig_setmethods__ = {}
    for _s in [RowSymSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSymSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSymSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSymSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayRowSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayRowSymSparse
    __del__ = lambda self : None;
ArrayRowSymSparse_swigregister = _seldon.ArrayRowSymSparse_swigregister
ArrayRowSymSparse_swigregister(ArrayRowSymSparse)

class ArrayColSymSparse(ColSymSparse):
    __swig_setmethods__ = {}
    for _s in [ColSymSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSymSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSymSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSymSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayColSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayColSymSparse
    __del__ = lambda self : None;
ArrayColSymSparse_swigregister = _seldon.ArrayColSymSparse_swigregister
ArrayColSymSparse_swigregister(ArrayColSymSparse)

class ArrayRowComplexSparse(RowComplexSparse):
    __swig_setmethods__ = {}
    for _s in [RowComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayRowComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayRowComplexSparse
    __del__ = lambda self : None;
ArrayRowComplexSparse_swigregister = _seldon.ArrayRowComplexSparse_swigregister
ArrayRowComplexSparse_swigregister(ArrayRowComplexSparse)

class ArrayRowSymComplexSparse(RowSymComplexSparse):
    __swig_setmethods__ = {}
    for _s in [RowSymComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSymComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSymComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayRowSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayRowSymComplexSparse
    __del__ = lambda self : None;
ArrayRowSymComplexSparse_swigregister = _seldon.ArrayRowSymComplexSparse_swigregister
ArrayRowSymComplexSparse_swigregister(ArrayRowSymComplexSparse)

class ArrayColComplexSparse(ColComplexSparse):
    __swig_setmethods__ = {}
    for _s in [ColComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayColComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayColComplexSparse
    __del__ = lambda self : None;
ArrayColComplexSparse_swigregister = _seldon.ArrayColComplexSparse_swigregister
ArrayColComplexSparse_swigregister(ArrayColComplexSparse)

class ArrayColSymComplexSparse(ColSymComplexSparse):
    __swig_setmethods__ = {}
    for _s in [ColSymComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSymComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSymComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_ArrayColSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ArrayColSymComplexSparse
    __del__ = lambda self : None;
ArrayColSymComplexSparse_swigregister = _seldon.ArrayColSymComplexSparse_swigregister
ArrayColSymComplexSparse_swigregister(ArrayColSymComplexSparse)

class ColSymPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColSymPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColSymPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColSymPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColSymPacked_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColSymPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColSymPacked
    __del__ = lambda self : None;
ColSymPacked_swigregister = _seldon.ColSymPacked_swigregister
ColSymPacked_swigregister(ColSymPacked)

def ColSymPacked_GetFirst(*args):
  return _seldon.ColSymPacked_GetFirst(*args)
ColSymPacked_GetFirst = _seldon.ColSymPacked_GetFirst

def ColSymPacked_GetSecond(*args):
  return _seldon.ColSymPacked_GetSecond(*args)
ColSymPacked_GetSecond = _seldon.ColSymPacked_GetSecond

class RowSymPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowSymPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowSymPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowSymPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowSymPacked_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowSymPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowSymPacked
    __del__ = lambda self : None;
RowSymPacked_swigregister = _seldon.RowSymPacked_swigregister
RowSymPacked_swigregister(RowSymPacked)

def RowSymPacked_GetFirst(*args):
  return _seldon.RowSymPacked_GetFirst(*args)
RowSymPacked_GetFirst = _seldon.RowSymPacked_GetFirst

def RowSymPacked_GetSecond(*args):
  return _seldon.RowSymPacked_GetSecond(*args)
RowSymPacked_GetSecond = _seldon.RowSymPacked_GetSecond

class ColSym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSym, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColSym_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColSym_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColSym_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColSym_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColSym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColSym
    __del__ = lambda self : None;
ColSym_swigregister = _seldon.ColSym_swigregister
ColSym_swigregister(ColSym)

def ColSym_GetFirst(*args):
  return _seldon.ColSym_GetFirst(*args)
ColSym_GetFirst = _seldon.ColSym_GetFirst

def ColSym_GetSecond(*args):
  return _seldon.ColSym_GetSecond(*args)
ColSym_GetSecond = _seldon.ColSym_GetSecond

class RowSym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSym, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowSym_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowSym_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowSym_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowSym_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowSym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowSym
    __del__ = lambda self : None;
RowSym_swigregister = _seldon.RowSym_swigregister
RowSym_swigregister(RowSym)

def RowSym_GetFirst(*args):
  return _seldon.RowSym_GetFirst(*args)
RowSym_GetFirst = _seldon.RowSym_GetFirst

def RowSym_GetSecond(*args):
  return _seldon.RowSym_GetSecond(*args)
RowSym_GetSecond = _seldon.RowSym_GetSecond

class ColHerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColHerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColHerm, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColHerm_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColHerm_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColHerm_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColHerm_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColHerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColHerm
    __del__ = lambda self : None;
ColHerm_swigregister = _seldon.ColHerm_swigregister
ColHerm_swigregister(ColHerm)

def ColHerm_GetFirst(*args):
  return _seldon.ColHerm_GetFirst(*args)
ColHerm_GetFirst = _seldon.ColHerm_GetFirst

def ColHerm_GetSecond(*args):
  return _seldon.ColHerm_GetSecond(*args)
ColHerm_GetSecond = _seldon.ColHerm_GetSecond

class RowHerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowHerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowHerm, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowHerm_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowHerm_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowHerm_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowHerm_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowHerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowHerm
    __del__ = lambda self : None;
RowHerm_swigregister = _seldon.RowHerm_swigregister
RowHerm_swigregister(RowHerm)

def RowHerm_GetFirst(*args):
  return _seldon.RowHerm_GetFirst(*args)
RowHerm_GetFirst = _seldon.RowHerm_GetFirst

def RowHerm_GetSecond(*args):
  return _seldon.RowHerm_GetSecond(*args)
RowHerm_GetSecond = _seldon.RowHerm_GetSecond

class ColHermPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColHermPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColHermPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColHermPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColHermPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColHermPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColHermPacked_GetSecond)
    def __init__(self): 
        this = _seldon.new_ColHermPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColHermPacked
    __del__ = lambda self : None;
ColHermPacked_swigregister = _seldon.ColHermPacked_swigregister
ColHermPacked_swigregister(ColHermPacked)

def ColHermPacked_GetFirst(*args):
  return _seldon.ColHermPacked_GetFirst(*args)
ColHermPacked_GetFirst = _seldon.ColHermPacked_GetFirst

def ColHermPacked_GetSecond(*args):
  return _seldon.ColHermPacked_GetSecond(*args)
ColHermPacked_GetSecond = _seldon.ColHermPacked_GetSecond

class RowHermPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowHermPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowHermPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowHermPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowHermPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowHermPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowHermPacked_GetSecond)
    def __init__(self): 
        this = _seldon.new_RowHermPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowHermPacked
    __del__ = lambda self : None;
RowHermPacked_swigregister = _seldon.RowHermPacked_swigregister
RowHermPacked_swigregister(RowHermPacked)

def RowHermPacked_GetFirst(*args):
  return _seldon.RowHermPacked_GetFirst(*args)
RowHermPacked_GetFirst = _seldon.RowHermPacked_GetFirst

def RowHermPacked_GetSecond(*args):
  return _seldon.RowHermPacked_GetSecond(*args)
RowHermPacked_GetSecond = _seldon.RowHermPacked_GetSecond

class ColUpTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColUpTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColUpTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColUpTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColUpTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColUpTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColUpTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.ColUpTriang_UpLo
    if _newclass:UpLo = staticmethod(_seldon.ColUpTriang_UpLo)
    def __init__(self): 
        this = _seldon.new_ColUpTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColUpTriang
    __del__ = lambda self : None;
ColUpTriang_swigregister = _seldon.ColUpTriang_swigregister
ColUpTriang_swigregister(ColUpTriang)

def ColUpTriang_GetFirst(*args):
  return _seldon.ColUpTriang_GetFirst(*args)
ColUpTriang_GetFirst = _seldon.ColUpTriang_GetFirst

def ColUpTriang_GetSecond(*args):
  return _seldon.ColUpTriang_GetSecond(*args)
ColUpTriang_GetSecond = _seldon.ColUpTriang_GetSecond

def ColUpTriang_UpLo():
  return _seldon.ColUpTriang_UpLo()
ColUpTriang_UpLo = _seldon.ColUpTriang_UpLo

class ColLoTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColLoTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColLoTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColLoTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColLoTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColLoTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColLoTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.ColLoTriang_UpLo
    if _newclass:UpLo = staticmethod(_seldon.ColLoTriang_UpLo)
    def __init__(self): 
        this = _seldon.new_ColLoTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColLoTriang
    __del__ = lambda self : None;
ColLoTriang_swigregister = _seldon.ColLoTriang_swigregister
ColLoTriang_swigregister(ColLoTriang)

def ColLoTriang_GetFirst(*args):
  return _seldon.ColLoTriang_GetFirst(*args)
ColLoTriang_GetFirst = _seldon.ColLoTriang_GetFirst

def ColLoTriang_GetSecond(*args):
  return _seldon.ColLoTriang_GetSecond(*args)
ColLoTriang_GetSecond = _seldon.ColLoTriang_GetSecond

def ColLoTriang_UpLo():
  return _seldon.ColLoTriang_UpLo()
ColLoTriang_UpLo = _seldon.ColLoTriang_UpLo

class RowUpTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowUpTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowUpTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowUpTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowUpTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowUpTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowUpTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.RowUpTriang_UpLo
    if _newclass:UpLo = staticmethod(_seldon.RowUpTriang_UpLo)
    def __init__(self): 
        this = _seldon.new_RowUpTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowUpTriang
    __del__ = lambda self : None;
RowUpTriang_swigregister = _seldon.RowUpTriang_swigregister
RowUpTriang_swigregister(RowUpTriang)

def RowUpTriang_GetFirst(*args):
  return _seldon.RowUpTriang_GetFirst(*args)
RowUpTriang_GetFirst = _seldon.RowUpTriang_GetFirst

def RowUpTriang_GetSecond(*args):
  return _seldon.RowUpTriang_GetSecond(*args)
RowUpTriang_GetSecond = _seldon.RowUpTriang_GetSecond

def RowUpTriang_UpLo():
  return _seldon.RowUpTriang_UpLo()
RowUpTriang_UpLo = _seldon.RowUpTriang_UpLo

class RowLoTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowLoTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowLoTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowLoTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowLoTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowLoTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowLoTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.RowLoTriang_UpLo
    if _newclass:UpLo = staticmethod(_seldon.RowLoTriang_UpLo)
    def __init__(self): 
        this = _seldon.new_RowLoTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowLoTriang
    __del__ = lambda self : None;
RowLoTriang_swigregister = _seldon.RowLoTriang_swigregister
RowLoTriang_swigregister(RowLoTriang)

def RowLoTriang_GetFirst(*args):
  return _seldon.RowLoTriang_GetFirst(*args)
RowLoTriang_GetFirst = _seldon.RowLoTriang_GetFirst

def RowLoTriang_GetSecond(*args):
  return _seldon.RowLoTriang_GetSecond(*args)
RowLoTriang_GetSecond = _seldon.RowLoTriang_GetSecond

def RowLoTriang_UpLo():
  return _seldon.RowLoTriang_UpLo()
RowLoTriang_UpLo = _seldon.RowLoTriang_UpLo

class ColUpTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColUpTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColUpTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColUpTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColUpTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColUpTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColUpTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.ColUpTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_seldon.ColUpTriangPacked_UpLo)
    def __init__(self): 
        this = _seldon.new_ColUpTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColUpTriangPacked
    __del__ = lambda self : None;
ColUpTriangPacked_swigregister = _seldon.ColUpTriangPacked_swigregister
ColUpTriangPacked_swigregister(ColUpTriangPacked)

def ColUpTriangPacked_GetFirst(*args):
  return _seldon.ColUpTriangPacked_GetFirst(*args)
ColUpTriangPacked_GetFirst = _seldon.ColUpTriangPacked_GetFirst

def ColUpTriangPacked_GetSecond(*args):
  return _seldon.ColUpTriangPacked_GetSecond(*args)
ColUpTriangPacked_GetSecond = _seldon.ColUpTriangPacked_GetSecond

def ColUpTriangPacked_UpLo():
  return _seldon.ColUpTriangPacked_UpLo()
ColUpTriangPacked_UpLo = _seldon.ColUpTriangPacked_UpLo

class ColLoTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColLoTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColLoTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.ColLoTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.ColLoTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.ColLoTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.ColLoTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.ColLoTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_seldon.ColLoTriangPacked_UpLo)
    def __init__(self): 
        this = _seldon.new_ColLoTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_ColLoTriangPacked
    __del__ = lambda self : None;
ColLoTriangPacked_swigregister = _seldon.ColLoTriangPacked_swigregister
ColLoTriangPacked_swigregister(ColLoTriangPacked)

def ColLoTriangPacked_GetFirst(*args):
  return _seldon.ColLoTriangPacked_GetFirst(*args)
ColLoTriangPacked_GetFirst = _seldon.ColLoTriangPacked_GetFirst

def ColLoTriangPacked_GetSecond(*args):
  return _seldon.ColLoTriangPacked_GetSecond(*args)
ColLoTriangPacked_GetSecond = _seldon.ColLoTriangPacked_GetSecond

def ColLoTriangPacked_UpLo():
  return _seldon.ColLoTriangPacked_UpLo()
ColLoTriangPacked_UpLo = _seldon.ColLoTriangPacked_UpLo

class RowUpTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowUpTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowUpTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowUpTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowUpTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowUpTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowUpTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.RowUpTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_seldon.RowUpTriangPacked_UpLo)
    def __init__(self): 
        this = _seldon.new_RowUpTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowUpTriangPacked
    __del__ = lambda self : None;
RowUpTriangPacked_swigregister = _seldon.RowUpTriangPacked_swigregister
RowUpTriangPacked_swigregister(RowUpTriangPacked)

def RowUpTriangPacked_GetFirst(*args):
  return _seldon.RowUpTriangPacked_GetFirst(*args)
RowUpTriangPacked_GetFirst = _seldon.RowUpTriangPacked_GetFirst

def RowUpTriangPacked_GetSecond(*args):
  return _seldon.RowUpTriangPacked_GetSecond(*args)
RowUpTriangPacked_GetSecond = _seldon.RowUpTriangPacked_GetSecond

def RowUpTriangPacked_UpLo():
  return _seldon.RowUpTriangPacked_UpLo()
RowUpTriangPacked_UpLo = _seldon.RowUpTriangPacked_UpLo

class RowLoTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowLoTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowLoTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _seldon.RowLoTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_seldon.RowLoTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _seldon.RowLoTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_seldon.RowLoTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _seldon.RowLoTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_seldon.RowLoTriangPacked_UpLo)
    def __init__(self): 
        this = _seldon.new_RowLoTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_RowLoTriangPacked
    __del__ = lambda self : None;
RowLoTriangPacked_swigregister = _seldon.RowLoTriangPacked_swigregister
RowLoTriangPacked_swigregister(RowLoTriangPacked)

def RowLoTriangPacked_GetFirst(*args):
  return _seldon.RowLoTriangPacked_GetFirst(*args)
RowLoTriangPacked_GetFirst = _seldon.RowLoTriangPacked_GetFirst

def RowLoTriangPacked_GetSecond(*args):
  return _seldon.RowLoTriangPacked_GetSecond(*args)
RowLoTriangPacked_GetSecond = _seldon.RowLoTriangPacked_GetSecond

def RowLoTriangPacked_UpLo():
  return _seldon.RowLoTriangPacked_UpLo()
RowLoTriangPacked_UpLo = _seldon.RowLoTriangPacked_UpLo

class General(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, General, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, General, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_General()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_General
    __del__ = lambda self : None;
General_swigregister = _seldon.General_swigregister
General_swigregister(General)

class Symmetric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symmetric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symmetric, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _seldon.new_Symmetric()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_Symmetric
    __del__ = lambda self : None;
Symmetric_swigregister = _seldon.Symmetric_swigregister
Symmetric_swigregister(Symmetric)

class IntMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _seldon.IntMalloc_allocate(self, *args)
    def deallocate(self, *args): return _seldon.IntMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _seldon.IntMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _seldon.IntMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _seldon.IntMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _seldon.new_IntMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_IntMalloc
    __del__ = lambda self : None;
IntMalloc_swigregister = _seldon.IntMalloc_swigregister
IntMalloc_swigregister(IntMalloc)

class BoolMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _seldon.BoolMalloc_allocate(self, *args)
    def deallocate(self, *args): return _seldon.BoolMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _seldon.BoolMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _seldon.BoolMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _seldon.BoolMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _seldon.new_BoolMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_BoolMalloc
    __del__ = lambda self : None;
BoolMalloc_swigregister = _seldon.BoolMalloc_swigregister
BoolMalloc_swigregister(BoolMalloc)

class BaseSeldonVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_BaseSeldonVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_BaseSeldonVectorInt
    __del__ = lambda self : None;
    def GetM(self): return _seldon.BaseSeldonVectorInt_GetM(self)
    def GetLength(self): return _seldon.BaseSeldonVectorInt_GetLength(self)
    def GetSize(self): return _seldon.BaseSeldonVectorInt_GetSize(self)
    def GetData(self): return _seldon.BaseSeldonVectorInt_GetData(self)
    def GetDataConst(self): return _seldon.BaseSeldonVectorInt_GetDataConst(self)
    def GetDataVoid(self): return _seldon.BaseSeldonVectorInt_GetDataVoid(self)
    def GetDataConstVoid(self): return _seldon.BaseSeldonVectorInt_GetDataConstVoid(self)
BaseSeldonVectorInt_swigregister = _seldon.BaseSeldonVectorInt_swigregister
BaseSeldonVectorInt_swigregister(BaseSeldonVectorInt)

class BaseSeldonVectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_BaseSeldonVectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_BaseSeldonVectorBool
    __del__ = lambda self : None;
    def GetM(self): return _seldon.BaseSeldonVectorBool_GetM(self)
    def GetLength(self): return _seldon.BaseSeldonVectorBool_GetLength(self)
    def GetSize(self): return _seldon.BaseSeldonVectorBool_GetSize(self)
    def GetData(self): return _seldon.BaseSeldonVectorBool_GetData(self)
    def GetDataConst(self): return _seldon.BaseSeldonVectorBool_GetDataConst(self)
    def GetDataVoid(self): return _seldon.BaseSeldonVectorBool_GetDataVoid(self)
    def GetDataConstVoid(self): return _seldon.BaseSeldonVectorBool_GetDataConstVoid(self)
BaseSeldonVectorBool_swigregister = _seldon.BaseSeldonVectorBool_swigregister
BaseSeldonVectorBool_swigregister(BaseSeldonVectorBool)

class VectorInt(BaseSeldonVectorInt):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_VectorInt
    __del__ = lambda self : None;
    def Clear(self): return _seldon.VectorInt_Clear(self)
    def Reallocate(self, *args): return _seldon.VectorInt_Reallocate(self, *args)
    def Resize(self, *args): return _seldon.VectorInt_Resize(self, *args)
    def SetData(self, *args): return _seldon.VectorInt_SetData(self, *args)
    def Nullify(self): return _seldon.VectorInt_Nullify(self)
    def __call__(self, *args): return _seldon.VectorInt___call__(self, *args)
    def Copy(self, *args): return _seldon.VectorInt_Copy(self, *args)
    def Append(self, *args): return _seldon.VectorInt_Append(self, *args)
    def GetDataSize(self): return _seldon.VectorInt_GetDataSize(self)
    def Zero(self): return _seldon.VectorInt_Zero(self)
    def Fill(self): return _seldon.VectorInt_Fill(self)
    def FillRand(self): return _seldon.VectorInt_FillRand(self)
    def Print(self): return _seldon.VectorInt_Print(self)
    def Write(self, *args): return _seldon.VectorInt_Write(self, *args)
    def WriteText(self, *args): return _seldon.VectorInt_WriteText(self, *args)
    def Read(self, *args): return _seldon.VectorInt_Read(self, *args)
    def __getitem__(self, *args): return _seldon.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _seldon.VectorInt___setitem__(self, *args)
    def __len__(self): return _seldon.VectorInt___len__(self)
VectorInt_swigregister = _seldon.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorBool(BaseSeldonVectorBool):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorBool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBool, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorBool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_VectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_VectorBool
    __del__ = lambda self : None;
    def Clear(self): return _seldon.VectorBool_Clear(self)
    def Reallocate(self, *args): return _seldon.VectorBool_Reallocate(self, *args)
    def Resize(self, *args): return _seldon.VectorBool_Resize(self, *args)
    def SetData(self, *args): return _seldon.VectorBool_SetData(self, *args)
    def Nullify(self): return _seldon.VectorBool_Nullify(self)
    def __call__(self, *args): return _seldon.VectorBool___call__(self, *args)
    def Copy(self, *args): return _seldon.VectorBool_Copy(self, *args)
    def Append(self, *args): return _seldon.VectorBool_Append(self, *args)
    def GetDataSize(self): return _seldon.VectorBool_GetDataSize(self)
    def Zero(self): return _seldon.VectorBool_Zero(self)
    def Fill(self): return _seldon.VectorBool_Fill(self)
    def FillRand(self): return _seldon.VectorBool_FillRand(self)
    def Print(self): return _seldon.VectorBool_Print(self)
    def Write(self, *args): return _seldon.VectorBool_Write(self, *args)
    def WriteText(self, *args): return _seldon.VectorBool_WriteText(self, *args)
    def Read(self, *args): return _seldon.VectorBool_Read(self, *args)
    def __getitem__(self, *args): return _seldon.VectorBool___getitem__(self, *args)
    def __setitem__(self, *args): return _seldon.VectorBool___setitem__(self, *args)
    def __len__(self): return _seldon.VectorBool___len__(self)
VectorBool_swigregister = _seldon.VectorBool_swigregister
VectorBool_swigregister(VectorBool)

class DoubleMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _seldon.DoubleMalloc_allocate(self, *args)
    def deallocate(self, *args): return _seldon.DoubleMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _seldon.DoubleMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _seldon.DoubleMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _seldon.DoubleMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _seldon.new_DoubleMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_DoubleMalloc
    __del__ = lambda self : None;
DoubleMalloc_swigregister = _seldon.DoubleMalloc_swigregister
DoubleMalloc_swigregister(DoubleMalloc)

class BaseSeldonVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_BaseSeldonVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_BaseSeldonVectorDouble
    __del__ = lambda self : None;
    def GetM(self): return _seldon.BaseSeldonVectorDouble_GetM(self)
    def GetLength(self): return _seldon.BaseSeldonVectorDouble_GetLength(self)
    def GetSize(self): return _seldon.BaseSeldonVectorDouble_GetSize(self)
    def GetData(self): return _seldon.BaseSeldonVectorDouble_GetData(self)
    def GetDataConst(self): return _seldon.BaseSeldonVectorDouble_GetDataConst(self)
    def GetDataVoid(self): return _seldon.BaseSeldonVectorDouble_GetDataVoid(self)
    def GetDataConstVoid(self): return _seldon.BaseSeldonVectorDouble_GetDataConstVoid(self)
BaseSeldonVectorDouble_swigregister = _seldon.BaseSeldonVectorDouble_swigregister
BaseSeldonVectorDouble_swigregister(BaseSeldonVectorDouble)

class VectorDouble(BaseSeldonVectorDouble):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_VectorDouble
    __del__ = lambda self : None;
    def Clear(self): return _seldon.VectorDouble_Clear(self)
    def Reallocate(self, *args): return _seldon.VectorDouble_Reallocate(self, *args)
    def Resize(self, *args): return _seldon.VectorDouble_Resize(self, *args)
    def SetData(self, *args): return _seldon.VectorDouble_SetData(self, *args)
    def Nullify(self): return _seldon.VectorDouble_Nullify(self)
    def __call__(self, *args): return _seldon.VectorDouble___call__(self, *args)
    def Copy(self, *args): return _seldon.VectorDouble_Copy(self, *args)
    def Append(self, *args): return _seldon.VectorDouble_Append(self, *args)
    def GetDataSize(self): return _seldon.VectorDouble_GetDataSize(self)
    def Zero(self): return _seldon.VectorDouble_Zero(self)
    def Fill(self): return _seldon.VectorDouble_Fill(self)
    def FillRand(self): return _seldon.VectorDouble_FillRand(self)
    def Print(self): return _seldon.VectorDouble_Print(self)
    def Write(self, *args): return _seldon.VectorDouble_Write(self, *args)
    def WriteText(self, *args): return _seldon.VectorDouble_WriteText(self, *args)
    def Read(self, *args): return _seldon.VectorDouble_Read(self, *args)
    def __getitem__(self, *args): return _seldon.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _seldon.VectorDouble___setitem__(self, *args)
    def __len__(self): return _seldon.VectorDouble___len__(self)
VectorDouble_swigregister = _seldon.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixBaseInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixBaseInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixBaseInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixBaseInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_MatrixBaseInt
    __del__ = lambda self : None;
    def GetM(self, *args): return _seldon.MatrixBaseInt_GetM(self, *args)
    def GetN(self, *args): return _seldon.MatrixBaseInt_GetN(self, *args)
    def GetSize(self): return _seldon.MatrixBaseInt_GetSize(self)
    def GetData(self): return _seldon.MatrixBaseInt_GetData(self)
    def GetDataConst(self): return _seldon.MatrixBaseInt_GetDataConst(self)
    def GetDataVoid(self): return _seldon.MatrixBaseInt_GetDataVoid(self)
    def GetDataConstVoid(self): return _seldon.MatrixBaseInt_GetDataConstVoid(self)
MatrixBaseInt_swigregister = _seldon.MatrixBaseInt_swigregister
MatrixBaseInt_swigregister(MatrixBaseInt)

class MatrixPointersInt(MatrixBaseInt):
    __swig_setmethods__ = {}
    for _s in [MatrixBaseInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPointersInt, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPointersInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixPointersInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_MatrixPointersInt
    __del__ = lambda self : None;
    def Clear(self): return _seldon.MatrixPointersInt_Clear(self)
    def GetDataSize(self): return _seldon.MatrixPointersInt_GetDataSize(self)
    def Reallocate(self, *args): return _seldon.MatrixPointersInt_Reallocate(self, *args)
    def SetData(self, *args): return _seldon.MatrixPointersInt_SetData(self, *args)
    def Nullify(self): return _seldon.MatrixPointersInt_Nullify(self)
    def Resize(self, *args): return _seldon.MatrixPointersInt_Resize(self, *args)
    def __call__(self, *args): return _seldon.MatrixPointersInt___call__(self, *args)
    def Val(self, *args): return _seldon.MatrixPointersInt_Val(self, *args)
    def Copy(self, *args): return _seldon.MatrixPointersInt_Copy(self, *args)
    def GetLD(self): return _seldon.MatrixPointersInt_GetLD(self)
    def Zero(self): return _seldon.MatrixPointersInt_Zero(self)
    def SetIdentity(self): return _seldon.MatrixPointersInt_SetIdentity(self)
    def Fill(self): return _seldon.MatrixPointersInt_Fill(self)
    def FillRand(self): return _seldon.MatrixPointersInt_FillRand(self)
    def Print(self, *args): return _seldon.MatrixPointersInt_Print(self, *args)
    def Write(self, *args): return _seldon.MatrixPointersInt_Write(self, *args)
    def WriteText(self, *args): return _seldon.MatrixPointersInt_WriteText(self, *args)
    def Read(self, *args): return _seldon.MatrixPointersInt_Read(self, *args)
MatrixPointersInt_swigregister = _seldon.MatrixPointersInt_swigregister
MatrixPointersInt_swigregister(MatrixPointersInt)

class MatrixInt(MatrixPointersInt):
    __swig_setmethods__ = {}
    for _s in [MatrixPointersInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPointersInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _seldon.MatrixInt___getitem__(self, *args)
    def __setitem__(self, *args): return _seldon.MatrixInt___setitem__(self, *args)
    def __len__(self): return _seldon.MatrixInt___len__(self)
    __swig_destroy__ = _seldon.delete_MatrixInt
    __del__ = lambda self : None;
MatrixInt_swigregister = _seldon.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixBaseDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixBaseDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixBaseDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixBaseDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_MatrixBaseDouble
    __del__ = lambda self : None;
    def GetM(self, *args): return _seldon.MatrixBaseDouble_GetM(self, *args)
    def GetN(self, *args): return _seldon.MatrixBaseDouble_GetN(self, *args)
    def GetSize(self): return _seldon.MatrixBaseDouble_GetSize(self)
    def GetData(self): return _seldon.MatrixBaseDouble_GetData(self)
    def GetDataConst(self): return _seldon.MatrixBaseDouble_GetDataConst(self)
    def GetDataVoid(self): return _seldon.MatrixBaseDouble_GetDataVoid(self)
    def GetDataConstVoid(self): return _seldon.MatrixBaseDouble_GetDataConstVoid(self)
MatrixBaseDouble_swigregister = _seldon.MatrixBaseDouble_swigregister
MatrixBaseDouble_swigregister(MatrixBaseDouble)

class MatrixPointersDouble(MatrixBaseDouble):
    __swig_setmethods__ = {}
    for _s in [MatrixBaseDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPointersDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPointersDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixPointersDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _seldon.delete_MatrixPointersDouble
    __del__ = lambda self : None;
    def Clear(self): return _seldon.MatrixPointersDouble_Clear(self)
    def GetDataSize(self): return _seldon.MatrixPointersDouble_GetDataSize(self)
    def Reallocate(self, *args): return _seldon.MatrixPointersDouble_Reallocate(self, *args)
    def SetData(self, *args): return _seldon.MatrixPointersDouble_SetData(self, *args)
    def Nullify(self): return _seldon.MatrixPointersDouble_Nullify(self)
    def Resize(self, *args): return _seldon.MatrixPointersDouble_Resize(self, *args)
    def __call__(self, *args): return _seldon.MatrixPointersDouble___call__(self, *args)
    def Val(self, *args): return _seldon.MatrixPointersDouble_Val(self, *args)
    def Copy(self, *args): return _seldon.MatrixPointersDouble_Copy(self, *args)
    def GetLD(self): return _seldon.MatrixPointersDouble_GetLD(self)
    def Zero(self): return _seldon.MatrixPointersDouble_Zero(self)
    def SetIdentity(self): return _seldon.MatrixPointersDouble_SetIdentity(self)
    def Fill(self): return _seldon.MatrixPointersDouble_Fill(self)
    def FillRand(self): return _seldon.MatrixPointersDouble_FillRand(self)
    def Print(self, *args): return _seldon.MatrixPointersDouble_Print(self, *args)
    def Write(self, *args): return _seldon.MatrixPointersDouble_Write(self, *args)
    def WriteText(self, *args): return _seldon.MatrixPointersDouble_WriteText(self, *args)
    def Read(self, *args): return _seldon.MatrixPointersDouble_Read(self, *args)
MatrixPointersDouble_swigregister = _seldon.MatrixPointersDouble_swigregister
MatrixPointersDouble_swigregister(MatrixPointersDouble)

class MatrixDouble(MatrixPointersDouble):
    __swig_setmethods__ = {}
    for _s in [MatrixPointersDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPointersDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _seldon.new_MatrixDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _seldon.MatrixDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _seldon.MatrixDouble___setitem__(self, *args)
    def __len__(self): return _seldon.MatrixDouble___len__(self)
    __swig_destroy__ = _seldon.delete_MatrixDouble
    __del__ = lambda self : None;
MatrixDouble_swigregister = _seldon.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)


def GetRowDouble(*args):
  return _seldon.GetRowDouble(*args)
GetRowDouble = _seldon.GetRowDouble

def SetRowDouble(*args):
  return _seldon.SetRowDouble(*args)
SetRowDouble = _seldon.SetRowDouble


