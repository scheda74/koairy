# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coefficient_repartition_core', [dirname(__file__)])
        except ImportError:
            import _coefficient_repartition_core
            return _coefficient_repartition_core
        if fp is not None:
            try:
                _mod = imp.load_module('_coefficient_repartition_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _coefficient_repartition_core = swig_import_helper()
    del swig_import_helper
else:
    import _coefficient_repartition_core
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Error(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_Error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_Error
    __del__ = lambda self : None;
    def What(self): return _coefficient_repartition_core.Error_What(self)
    def CoutWhat(self): return _coefficient_repartition_core.Error_CoutWhat(self)
Error_swigregister = _coefficient_repartition_core.Error_swigregister
Error_swigregister(Error)

class WrongArgument(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongArgument, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongArgument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_WrongArgument(*args)
        try: self.this.append(this)
        except: self.this = this
    def What(self): return _coefficient_repartition_core.WrongArgument_What(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_WrongArgument
    __del__ = lambda self : None;
WrongArgument_swigregister = _coefficient_repartition_core.WrongArgument_swigregister
WrongArgument_swigregister(WrongArgument)

class NoMemory(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMemory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_NoMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_NoMemory
    __del__ = lambda self : None;
NoMemory_swigregister = _coefficient_repartition_core.NoMemory_swigregister
NoMemory_swigregister(NoMemory)

class WrongDim(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongDim, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongDim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_WrongDim(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_WrongDim
    __del__ = lambda self : None;
WrongDim_swigregister = _coefficient_repartition_core.WrongDim_swigregister
WrongDim_swigregister(WrongDim)

class WrongIndex(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_WrongIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_WrongIndex
    __del__ = lambda self : None;
WrongIndex_swigregister = _coefficient_repartition_core.WrongIndex_swigregister
WrongIndex_swigregister(WrongIndex)

class WrongRow(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongRow, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongRow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_WrongRow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_WrongRow
    __del__ = lambda self : None;
WrongRow_swigregister = _coefficient_repartition_core.WrongRow_swigregister
WrongRow_swigregister(WrongRow)

class WrongCol(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrongCol, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrongCol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_WrongCol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_WrongCol
    __del__ = lambda self : None;
WrongCol_swigregister = _coefficient_repartition_core.WrongCol_swigregister
WrongCol_swigregister(WrongCol)

class IOError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_IOError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_IOError
    __del__ = lambda self : None;
IOError_swigregister = _coefficient_repartition_core.IOError_swigregister
IOError_swigregister(IOError)

class LapackError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LapackError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LapackError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_LapackError(*args)
        try: self.this.append(this)
        except: self.this = this
    def What(self): return _coefficient_repartition_core.LapackError_What(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_LapackError
    __del__ = lambda self : None;
LapackError_swigregister = _coefficient_repartition_core.LapackError_swigregister
LapackError_swigregister(LapackError)

class ColMajor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColMajor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColMajor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColMajor_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColMajor_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColMajor_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColMajor_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColMajor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColMajor
    __del__ = lambda self : None;
ColMajor_swigregister = _coefficient_repartition_core.ColMajor_swigregister
ColMajor_swigregister(ColMajor)

def ColMajor_GetFirst(*args):
  return _coefficient_repartition_core.ColMajor_GetFirst(*args)
ColMajor_GetFirst = _coefficient_repartition_core.ColMajor_GetFirst

def ColMajor_GetSecond(*args):
  return _coefficient_repartition_core.ColMajor_GetSecond(*args)
ColMajor_GetSecond = _coefficient_repartition_core.ColMajor_GetSecond

class RowMajor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowMajor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowMajor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowMajor_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowMajor_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowMajor_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowMajor_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowMajor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowMajor
    __del__ = lambda self : None;
RowMajor_swigregister = _coefficient_repartition_core.RowMajor_swigregister
RowMajor_swigregister(RowMajor)

def RowMajor_GetFirst(*args):
  return _coefficient_repartition_core.RowMajor_GetFirst(*args)
RowMajor_GetFirst = _coefficient_repartition_core.RowMajor_GetFirst

def RowMajor_GetSecond(*args):
  return _coefficient_repartition_core.RowMajor_GetSecond(*args)
RowMajor_GetSecond = _coefficient_repartition_core.RowMajor_GetSecond

class ColSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColSparse
    __del__ = lambda self : None;
ColSparse_swigregister = _coefficient_repartition_core.ColSparse_swigregister
ColSparse_swigregister(ColSparse)

def ColSparse_GetFirst(*args):
  return _coefficient_repartition_core.ColSparse_GetFirst(*args)
ColSparse_GetFirst = _coefficient_repartition_core.ColSparse_GetFirst

def ColSparse_GetSecond(*args):
  return _coefficient_repartition_core.ColSparse_GetSecond(*args)
ColSparse_GetSecond = _coefficient_repartition_core.ColSparse_GetSecond

class RowSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowSparse
    __del__ = lambda self : None;
RowSparse_swigregister = _coefficient_repartition_core.RowSparse_swigregister
RowSparse_swigregister(RowSparse)

def RowSparse_GetFirst(*args):
  return _coefficient_repartition_core.RowSparse_GetFirst(*args)
RowSparse_GetFirst = _coefficient_repartition_core.RowSparse_GetFirst

def RowSparse_GetSecond(*args):
  return _coefficient_repartition_core.RowSparse_GetSecond(*args)
RowSparse_GetSecond = _coefficient_repartition_core.RowSparse_GetSecond

class ColComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColComplexSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColComplexSparse
    __del__ = lambda self : None;
ColComplexSparse_swigregister = _coefficient_repartition_core.ColComplexSparse_swigregister
ColComplexSparse_swigregister(ColComplexSparse)

def ColComplexSparse_GetFirst(*args):
  return _coefficient_repartition_core.ColComplexSparse_GetFirst(*args)
ColComplexSparse_GetFirst = _coefficient_repartition_core.ColComplexSparse_GetFirst

def ColComplexSparse_GetSecond(*args):
  return _coefficient_repartition_core.ColComplexSparse_GetSecond(*args)
ColComplexSparse_GetSecond = _coefficient_repartition_core.ColComplexSparse_GetSecond

class RowComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowComplexSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowComplexSparse
    __del__ = lambda self : None;
RowComplexSparse_swigregister = _coefficient_repartition_core.RowComplexSparse_swigregister
RowComplexSparse_swigregister(RowComplexSparse)

def RowComplexSparse_GetFirst(*args):
  return _coefficient_repartition_core.RowComplexSparse_GetFirst(*args)
RowComplexSparse_GetFirst = _coefficient_repartition_core.RowComplexSparse_GetFirst

def RowComplexSparse_GetSecond(*args):
  return _coefficient_repartition_core.RowComplexSparse_GetSecond(*args)
RowComplexSparse_GetSecond = _coefficient_repartition_core.RowComplexSparse_GetSecond

class ColSymSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColSymSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColSymSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColSymSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColSymSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColSymSparse
    __del__ = lambda self : None;
ColSymSparse_swigregister = _coefficient_repartition_core.ColSymSparse_swigregister
ColSymSparse_swigregister(ColSymSparse)

def ColSymSparse_GetFirst(*args):
  return _coefficient_repartition_core.ColSymSparse_GetFirst(*args)
ColSymSparse_GetFirst = _coefficient_repartition_core.ColSymSparse_GetFirst

def ColSymSparse_GetSecond(*args):
  return _coefficient_repartition_core.ColSymSparse_GetSecond(*args)
ColSymSparse_GetSecond = _coefficient_repartition_core.ColSymSparse_GetSecond

class RowSymSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowSymSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowSymSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowSymSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowSymSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowSymSparse
    __del__ = lambda self : None;
RowSymSparse_swigregister = _coefficient_repartition_core.RowSymSparse_swigregister
RowSymSparse_swigregister(RowSymSparse)

def RowSymSparse_GetFirst(*args):
  return _coefficient_repartition_core.RowSymSparse_GetFirst(*args)
RowSymSparse_GetFirst = _coefficient_repartition_core.RowSymSparse_GetFirst

def RowSymSparse_GetSecond(*args):
  return _coefficient_repartition_core.RowSymSparse_GetSecond(*args)
RowSymSparse_GetSecond = _coefficient_repartition_core.RowSymSparse_GetSecond

class ColSymComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColSymComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColSymComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColSymComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColSymComplexSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColSymComplexSparse
    __del__ = lambda self : None;
ColSymComplexSparse_swigregister = _coefficient_repartition_core.ColSymComplexSparse_swigregister
ColSymComplexSparse_swigregister(ColSymComplexSparse)

def ColSymComplexSparse_GetFirst(*args):
  return _coefficient_repartition_core.ColSymComplexSparse_GetFirst(*args)
ColSymComplexSparse_GetFirst = _coefficient_repartition_core.ColSymComplexSparse_GetFirst

def ColSymComplexSparse_GetSecond(*args):
  return _coefficient_repartition_core.ColSymComplexSparse_GetSecond(*args)
ColSymComplexSparse_GetSecond = _coefficient_repartition_core.ColSymComplexSparse_GetSecond

class RowSymComplexSparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymComplexSparse, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowSymComplexSparse_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowSymComplexSparse_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowSymComplexSparse_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowSymComplexSparse_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowSymComplexSparse
    __del__ = lambda self : None;
RowSymComplexSparse_swigregister = _coefficient_repartition_core.RowSymComplexSparse_swigregister
RowSymComplexSparse_swigregister(RowSymComplexSparse)

def RowSymComplexSparse_GetFirst(*args):
  return _coefficient_repartition_core.RowSymComplexSparse_GetFirst(*args)
RowSymComplexSparse_GetFirst = _coefficient_repartition_core.RowSymComplexSparse_GetFirst

def RowSymComplexSparse_GetSecond(*args):
  return _coefficient_repartition_core.RowSymComplexSparse_GetSecond(*args)
RowSymComplexSparse_GetSecond = _coefficient_repartition_core.RowSymComplexSparse_GetSecond

class ArrayRowSparse(RowSparse):
    __swig_setmethods__ = {}
    for _s in [RowSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayRowSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayRowSparse
    __del__ = lambda self : None;
ArrayRowSparse_swigregister = _coefficient_repartition_core.ArrayRowSparse_swigregister
ArrayRowSparse_swigregister(ArrayRowSparse)

class ArrayColSparse(ColSparse):
    __swig_setmethods__ = {}
    for _s in [ColSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayColSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayColSparse
    __del__ = lambda self : None;
ArrayColSparse_swigregister = _coefficient_repartition_core.ArrayColSparse_swigregister
ArrayColSparse_swigregister(ArrayColSparse)

class ArrayRowSymSparse(RowSymSparse):
    __swig_setmethods__ = {}
    for _s in [RowSymSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSymSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSymSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSymSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayRowSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayRowSymSparse
    __del__ = lambda self : None;
ArrayRowSymSparse_swigregister = _coefficient_repartition_core.ArrayRowSymSparse_swigregister
ArrayRowSymSparse_swigregister(ArrayRowSymSparse)

class ArrayColSymSparse(ColSymSparse):
    __swig_setmethods__ = {}
    for _s in [ColSymSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSymSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSymSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSymSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayColSymSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayColSymSparse
    __del__ = lambda self : None;
ArrayColSymSparse_swigregister = _coefficient_repartition_core.ArrayColSymSparse_swigregister
ArrayColSymSparse_swigregister(ArrayColSymSparse)

class ArrayRowComplexSparse(RowComplexSparse):
    __swig_setmethods__ = {}
    for _s in [RowComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayRowComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayRowComplexSparse
    __del__ = lambda self : None;
ArrayRowComplexSparse_swigregister = _coefficient_repartition_core.ArrayRowComplexSparse_swigregister
ArrayRowComplexSparse_swigregister(ArrayRowComplexSparse)

class ArrayRowSymComplexSparse(RowSymComplexSparse):
    __swig_setmethods__ = {}
    for _s in [RowSymComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayRowSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [RowSymComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayRowSymComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayRowSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayRowSymComplexSparse
    __del__ = lambda self : None;
ArrayRowSymComplexSparse_swigregister = _coefficient_repartition_core.ArrayRowSymComplexSparse_swigregister
ArrayRowSymComplexSparse_swigregister(ArrayRowSymComplexSparse)

class ArrayColComplexSparse(ColComplexSparse):
    __swig_setmethods__ = {}
    for _s in [ColComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayColComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayColComplexSparse
    __del__ = lambda self : None;
ArrayColComplexSparse_swigregister = _coefficient_repartition_core.ArrayColComplexSparse_swigregister
ArrayColComplexSparse_swigregister(ArrayColComplexSparse)

class ArrayColSymComplexSparse(ColSymComplexSparse):
    __swig_setmethods__ = {}
    for _s in [ColSymComplexSparse]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayColSymComplexSparse, name, value)
    __swig_getmethods__ = {}
    for _s in [ColSymComplexSparse]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayColSymComplexSparse, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_ArrayColSymComplexSparse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ArrayColSymComplexSparse
    __del__ = lambda self : None;
ArrayColSymComplexSparse_swigregister = _coefficient_repartition_core.ArrayColSymComplexSparse_swigregister
ArrayColSymComplexSparse_swigregister(ArrayColSymComplexSparse)

class ColSymPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSymPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSymPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColSymPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColSymPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColSymPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColSymPacked_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColSymPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColSymPacked
    __del__ = lambda self : None;
ColSymPacked_swigregister = _coefficient_repartition_core.ColSymPacked_swigregister
ColSymPacked_swigregister(ColSymPacked)

def ColSymPacked_GetFirst(*args):
  return _coefficient_repartition_core.ColSymPacked_GetFirst(*args)
ColSymPacked_GetFirst = _coefficient_repartition_core.ColSymPacked_GetFirst

def ColSymPacked_GetSecond(*args):
  return _coefficient_repartition_core.ColSymPacked_GetSecond(*args)
ColSymPacked_GetSecond = _coefficient_repartition_core.ColSymPacked_GetSecond

class RowSymPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSymPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSymPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowSymPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowSymPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowSymPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowSymPacked_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowSymPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowSymPacked
    __del__ = lambda self : None;
RowSymPacked_swigregister = _coefficient_repartition_core.RowSymPacked_swigregister
RowSymPacked_swigregister(RowSymPacked)

def RowSymPacked_GetFirst(*args):
  return _coefficient_repartition_core.RowSymPacked_GetFirst(*args)
RowSymPacked_GetFirst = _coefficient_repartition_core.RowSymPacked_GetFirst

def RowSymPacked_GetSecond(*args):
  return _coefficient_repartition_core.RowSymPacked_GetSecond(*args)
RowSymPacked_GetSecond = _coefficient_repartition_core.RowSymPacked_GetSecond

class ColSym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColSym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColSym, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColSym_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColSym_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColSym_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColSym_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColSym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColSym
    __del__ = lambda self : None;
ColSym_swigregister = _coefficient_repartition_core.ColSym_swigregister
ColSym_swigregister(ColSym)

def ColSym_GetFirst(*args):
  return _coefficient_repartition_core.ColSym_GetFirst(*args)
ColSym_GetFirst = _coefficient_repartition_core.ColSym_GetFirst

def ColSym_GetSecond(*args):
  return _coefficient_repartition_core.ColSym_GetSecond(*args)
ColSym_GetSecond = _coefficient_repartition_core.ColSym_GetSecond

class RowSym(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowSym, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowSym, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowSym_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowSym_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowSym_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowSym_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowSym()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowSym
    __del__ = lambda self : None;
RowSym_swigregister = _coefficient_repartition_core.RowSym_swigregister
RowSym_swigregister(RowSym)

def RowSym_GetFirst(*args):
  return _coefficient_repartition_core.RowSym_GetFirst(*args)
RowSym_GetFirst = _coefficient_repartition_core.RowSym_GetFirst

def RowSym_GetSecond(*args):
  return _coefficient_repartition_core.RowSym_GetSecond(*args)
RowSym_GetSecond = _coefficient_repartition_core.RowSym_GetSecond

class ColHerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColHerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColHerm, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColHerm_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColHerm_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColHerm_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColHerm_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColHerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColHerm
    __del__ = lambda self : None;
ColHerm_swigregister = _coefficient_repartition_core.ColHerm_swigregister
ColHerm_swigregister(ColHerm)

def ColHerm_GetFirst(*args):
  return _coefficient_repartition_core.ColHerm_GetFirst(*args)
ColHerm_GetFirst = _coefficient_repartition_core.ColHerm_GetFirst

def ColHerm_GetSecond(*args):
  return _coefficient_repartition_core.ColHerm_GetSecond(*args)
ColHerm_GetSecond = _coefficient_repartition_core.ColHerm_GetSecond

class RowHerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowHerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowHerm, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowHerm_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowHerm_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowHerm_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowHerm_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowHerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowHerm
    __del__ = lambda self : None;
RowHerm_swigregister = _coefficient_repartition_core.RowHerm_swigregister
RowHerm_swigregister(RowHerm)

def RowHerm_GetFirst(*args):
  return _coefficient_repartition_core.RowHerm_GetFirst(*args)
RowHerm_GetFirst = _coefficient_repartition_core.RowHerm_GetFirst

def RowHerm_GetSecond(*args):
  return _coefficient_repartition_core.RowHerm_GetSecond(*args)
RowHerm_GetSecond = _coefficient_repartition_core.RowHerm_GetSecond

class ColHermPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColHermPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColHermPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColHermPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColHermPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColHermPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColHermPacked_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColHermPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColHermPacked
    __del__ = lambda self : None;
ColHermPacked_swigregister = _coefficient_repartition_core.ColHermPacked_swigregister
ColHermPacked_swigregister(ColHermPacked)

def ColHermPacked_GetFirst(*args):
  return _coefficient_repartition_core.ColHermPacked_GetFirst(*args)
ColHermPacked_GetFirst = _coefficient_repartition_core.ColHermPacked_GetFirst

def ColHermPacked_GetSecond(*args):
  return _coefficient_repartition_core.ColHermPacked_GetSecond(*args)
ColHermPacked_GetSecond = _coefficient_repartition_core.ColHermPacked_GetSecond

class RowHermPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowHermPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowHermPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowHermPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowHermPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowHermPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowHermPacked_GetSecond)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowHermPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowHermPacked
    __del__ = lambda self : None;
RowHermPacked_swigregister = _coefficient_repartition_core.RowHermPacked_swigregister
RowHermPacked_swigregister(RowHermPacked)

def RowHermPacked_GetFirst(*args):
  return _coefficient_repartition_core.RowHermPacked_GetFirst(*args)
RowHermPacked_GetFirst = _coefficient_repartition_core.RowHermPacked_GetFirst

def RowHermPacked_GetSecond(*args):
  return _coefficient_repartition_core.RowHermPacked_GetSecond(*args)
RowHermPacked_GetSecond = _coefficient_repartition_core.RowHermPacked_GetSecond

class ColUpTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColUpTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColUpTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColUpTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColUpTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColUpTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColUpTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.ColUpTriang_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.ColUpTriang_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColUpTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColUpTriang
    __del__ = lambda self : None;
ColUpTriang_swigregister = _coefficient_repartition_core.ColUpTriang_swigregister
ColUpTriang_swigregister(ColUpTriang)

def ColUpTriang_GetFirst(*args):
  return _coefficient_repartition_core.ColUpTriang_GetFirst(*args)
ColUpTriang_GetFirst = _coefficient_repartition_core.ColUpTriang_GetFirst

def ColUpTriang_GetSecond(*args):
  return _coefficient_repartition_core.ColUpTriang_GetSecond(*args)
ColUpTriang_GetSecond = _coefficient_repartition_core.ColUpTriang_GetSecond

def ColUpTriang_UpLo():
  return _coefficient_repartition_core.ColUpTriang_UpLo()
ColUpTriang_UpLo = _coefficient_repartition_core.ColUpTriang_UpLo

class ColLoTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColLoTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColLoTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColLoTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColLoTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColLoTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColLoTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.ColLoTriang_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.ColLoTriang_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColLoTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColLoTriang
    __del__ = lambda self : None;
ColLoTriang_swigregister = _coefficient_repartition_core.ColLoTriang_swigregister
ColLoTriang_swigregister(ColLoTriang)

def ColLoTriang_GetFirst(*args):
  return _coefficient_repartition_core.ColLoTriang_GetFirst(*args)
ColLoTriang_GetFirst = _coefficient_repartition_core.ColLoTriang_GetFirst

def ColLoTriang_GetSecond(*args):
  return _coefficient_repartition_core.ColLoTriang_GetSecond(*args)
ColLoTriang_GetSecond = _coefficient_repartition_core.ColLoTriang_GetSecond

def ColLoTriang_UpLo():
  return _coefficient_repartition_core.ColLoTriang_UpLo()
ColLoTriang_UpLo = _coefficient_repartition_core.ColLoTriang_UpLo

class RowUpTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowUpTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowUpTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowUpTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowUpTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowUpTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowUpTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.RowUpTriang_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.RowUpTriang_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowUpTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowUpTriang
    __del__ = lambda self : None;
RowUpTriang_swigregister = _coefficient_repartition_core.RowUpTriang_swigregister
RowUpTriang_swigregister(RowUpTriang)

def RowUpTriang_GetFirst(*args):
  return _coefficient_repartition_core.RowUpTriang_GetFirst(*args)
RowUpTriang_GetFirst = _coefficient_repartition_core.RowUpTriang_GetFirst

def RowUpTriang_GetSecond(*args):
  return _coefficient_repartition_core.RowUpTriang_GetSecond(*args)
RowUpTriang_GetSecond = _coefficient_repartition_core.RowUpTriang_GetSecond

def RowUpTriang_UpLo():
  return _coefficient_repartition_core.RowUpTriang_UpLo()
RowUpTriang_UpLo = _coefficient_repartition_core.RowUpTriang_UpLo

class RowLoTriang(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowLoTriang, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowLoTriang, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowLoTriang_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowLoTriang_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowLoTriang_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowLoTriang_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.RowLoTriang_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.RowLoTriang_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowLoTriang()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowLoTriang
    __del__ = lambda self : None;
RowLoTriang_swigregister = _coefficient_repartition_core.RowLoTriang_swigregister
RowLoTriang_swigregister(RowLoTriang)

def RowLoTriang_GetFirst(*args):
  return _coefficient_repartition_core.RowLoTriang_GetFirst(*args)
RowLoTriang_GetFirst = _coefficient_repartition_core.RowLoTriang_GetFirst

def RowLoTriang_GetSecond(*args):
  return _coefficient_repartition_core.RowLoTriang_GetSecond(*args)
RowLoTriang_GetSecond = _coefficient_repartition_core.RowLoTriang_GetSecond

def RowLoTriang_UpLo():
  return _coefficient_repartition_core.RowLoTriang_UpLo()
RowLoTriang_UpLo = _coefficient_repartition_core.RowLoTriang_UpLo

class ColUpTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColUpTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColUpTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColUpTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColUpTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColUpTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColUpTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.ColUpTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.ColUpTriangPacked_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColUpTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColUpTriangPacked
    __del__ = lambda self : None;
ColUpTriangPacked_swigregister = _coefficient_repartition_core.ColUpTriangPacked_swigregister
ColUpTriangPacked_swigregister(ColUpTriangPacked)

def ColUpTriangPacked_GetFirst(*args):
  return _coefficient_repartition_core.ColUpTriangPacked_GetFirst(*args)
ColUpTriangPacked_GetFirst = _coefficient_repartition_core.ColUpTriangPacked_GetFirst

def ColUpTriangPacked_GetSecond(*args):
  return _coefficient_repartition_core.ColUpTriangPacked_GetSecond(*args)
ColUpTriangPacked_GetSecond = _coefficient_repartition_core.ColUpTriangPacked_GetSecond

def ColUpTriangPacked_UpLo():
  return _coefficient_repartition_core.ColUpTriangPacked_UpLo()
ColUpTriangPacked_UpLo = _coefficient_repartition_core.ColUpTriangPacked_UpLo

class ColLoTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColLoTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColLoTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.ColLoTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.ColLoTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.ColLoTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.ColLoTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.ColLoTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.ColLoTriangPacked_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_ColLoTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ColLoTriangPacked
    __del__ = lambda self : None;
ColLoTriangPacked_swigregister = _coefficient_repartition_core.ColLoTriangPacked_swigregister
ColLoTriangPacked_swigregister(ColLoTriangPacked)

def ColLoTriangPacked_GetFirst(*args):
  return _coefficient_repartition_core.ColLoTriangPacked_GetFirst(*args)
ColLoTriangPacked_GetFirst = _coefficient_repartition_core.ColLoTriangPacked_GetFirst

def ColLoTriangPacked_GetSecond(*args):
  return _coefficient_repartition_core.ColLoTriangPacked_GetSecond(*args)
ColLoTriangPacked_GetSecond = _coefficient_repartition_core.ColLoTriangPacked_GetSecond

def ColLoTriangPacked_UpLo():
  return _coefficient_repartition_core.ColLoTriangPacked_UpLo()
ColLoTriangPacked_UpLo = _coefficient_repartition_core.ColLoTriangPacked_UpLo

class RowUpTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowUpTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowUpTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowUpTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowUpTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowUpTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowUpTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.RowUpTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.RowUpTriangPacked_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowUpTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowUpTriangPacked
    __del__ = lambda self : None;
RowUpTriangPacked_swigregister = _coefficient_repartition_core.RowUpTriangPacked_swigregister
RowUpTriangPacked_swigregister(RowUpTriangPacked)

def RowUpTriangPacked_GetFirst(*args):
  return _coefficient_repartition_core.RowUpTriangPacked_GetFirst(*args)
RowUpTriangPacked_GetFirst = _coefficient_repartition_core.RowUpTriangPacked_GetFirst

def RowUpTriangPacked_GetSecond(*args):
  return _coefficient_repartition_core.RowUpTriangPacked_GetSecond(*args)
RowUpTriangPacked_GetSecond = _coefficient_repartition_core.RowUpTriangPacked_GetSecond

def RowUpTriangPacked_UpLo():
  return _coefficient_repartition_core.RowUpTriangPacked_UpLo()
RowUpTriangPacked_UpLo = _coefficient_repartition_core.RowUpTriangPacked_UpLo

class RowLoTriangPacked(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RowLoTriangPacked, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RowLoTriangPacked, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetFirst"] = lambda x: _coefficient_repartition_core.RowLoTriangPacked_GetFirst
    if _newclass:GetFirst = staticmethod(_coefficient_repartition_core.RowLoTriangPacked_GetFirst)
    __swig_getmethods__["GetSecond"] = lambda x: _coefficient_repartition_core.RowLoTriangPacked_GetSecond
    if _newclass:GetSecond = staticmethod(_coefficient_repartition_core.RowLoTriangPacked_GetSecond)
    __swig_getmethods__["UpLo"] = lambda x: _coefficient_repartition_core.RowLoTriangPacked_UpLo
    if _newclass:UpLo = staticmethod(_coefficient_repartition_core.RowLoTriangPacked_UpLo)
    def __init__(self): 
        this = _coefficient_repartition_core.new_RowLoTriangPacked()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_RowLoTriangPacked
    __del__ = lambda self : None;
RowLoTriangPacked_swigregister = _coefficient_repartition_core.RowLoTriangPacked_swigregister
RowLoTriangPacked_swigregister(RowLoTriangPacked)

def RowLoTriangPacked_GetFirst(*args):
  return _coefficient_repartition_core.RowLoTriangPacked_GetFirst(*args)
RowLoTriangPacked_GetFirst = _coefficient_repartition_core.RowLoTriangPacked_GetFirst

def RowLoTriangPacked_GetSecond(*args):
  return _coefficient_repartition_core.RowLoTriangPacked_GetSecond(*args)
RowLoTriangPacked_GetSecond = _coefficient_repartition_core.RowLoTriangPacked_GetSecond

def RowLoTriangPacked_UpLo():
  return _coefficient_repartition_core.RowLoTriangPacked_UpLo()
RowLoTriangPacked_UpLo = _coefficient_repartition_core.RowLoTriangPacked_UpLo

class General(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, General, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, General, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_General()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_General
    __del__ = lambda self : None;
General_swigregister = _coefficient_repartition_core.General_swigregister
General_swigregister(General)

class Symmetric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symmetric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Symmetric, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _coefficient_repartition_core.new_Symmetric()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_Symmetric
    __del__ = lambda self : None;
Symmetric_swigregister = _coefficient_repartition_core.Symmetric_swigregister
Symmetric_swigregister(Symmetric)

class IntMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _coefficient_repartition_core.IntMalloc_allocate(self, *args)
    def deallocate(self, *args): return _coefficient_repartition_core.IntMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _coefficient_repartition_core.IntMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _coefficient_repartition_core.IntMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _coefficient_repartition_core.IntMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _coefficient_repartition_core.new_IntMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_IntMalloc
    __del__ = lambda self : None;
IntMalloc_swigregister = _coefficient_repartition_core.IntMalloc_swigregister
IntMalloc_swigregister(IntMalloc)

class BoolMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _coefficient_repartition_core.BoolMalloc_allocate(self, *args)
    def deallocate(self, *args): return _coefficient_repartition_core.BoolMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _coefficient_repartition_core.BoolMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _coefficient_repartition_core.BoolMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _coefficient_repartition_core.BoolMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _coefficient_repartition_core.new_BoolMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_BoolMalloc
    __del__ = lambda self : None;
BoolMalloc_swigregister = _coefficient_repartition_core.BoolMalloc_swigregister
BoolMalloc_swigregister(BoolMalloc)

class BaseSeldonVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_BaseSeldonVectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_BaseSeldonVectorInt
    __del__ = lambda self : None;
    def GetM(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetM(self)
    def GetLength(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetLength(self)
    def GetSize(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetSize(self)
    def GetData(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetData(self)
    def GetDataConst(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetDataConst(self)
    def GetDataVoid(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetDataVoid(self)
    def GetDataConstVoid(self): return _coefficient_repartition_core.BaseSeldonVectorInt_GetDataConstVoid(self)
BaseSeldonVectorInt_swigregister = _coefficient_repartition_core.BaseSeldonVectorInt_swigregister
BaseSeldonVectorInt_swigregister(BaseSeldonVectorInt)

class BaseSeldonVectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_BaseSeldonVectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_BaseSeldonVectorBool
    __del__ = lambda self : None;
    def GetM(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetM(self)
    def GetLength(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetLength(self)
    def GetSize(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetSize(self)
    def GetData(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetData(self)
    def GetDataConst(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetDataConst(self)
    def GetDataVoid(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetDataVoid(self)
    def GetDataConstVoid(self): return _coefficient_repartition_core.BaseSeldonVectorBool_GetDataConstVoid(self)
BaseSeldonVectorBool_swigregister = _coefficient_repartition_core.BaseSeldonVectorBool_swigregister
BaseSeldonVectorBool_swigregister(BaseSeldonVectorBool)

class VectorInt(BaseSeldonVectorInt):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_VectorInt
    __del__ = lambda self : None;
    def Clear(self): return _coefficient_repartition_core.VectorInt_Clear(self)
    def Reallocate(self, *args): return _coefficient_repartition_core.VectorInt_Reallocate(self, *args)
    def Resize(self, *args): return _coefficient_repartition_core.VectorInt_Resize(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.VectorInt_SetData(self, *args)
    def Nullify(self): return _coefficient_repartition_core.VectorInt_Nullify(self)
    def __call__(self, *args): return _coefficient_repartition_core.VectorInt___call__(self, *args)
    def Copy(self, *args): return _coefficient_repartition_core.VectorInt_Copy(self, *args)
    def Append(self, *args): return _coefficient_repartition_core.VectorInt_Append(self, *args)
    def GetDataSize(self): return _coefficient_repartition_core.VectorInt_GetDataSize(self)
    def Zero(self): return _coefficient_repartition_core.VectorInt_Zero(self)
    def Fill(self): return _coefficient_repartition_core.VectorInt_Fill(self)
    def FillRand(self): return _coefficient_repartition_core.VectorInt_FillRand(self)
    def Print(self): return _coefficient_repartition_core.VectorInt_Print(self)
    def Write(self, *args): return _coefficient_repartition_core.VectorInt_Write(self, *args)
    def WriteText(self, *args): return _coefficient_repartition_core.VectorInt_WriteText(self, *args)
    def Read(self, *args): return _coefficient_repartition_core.VectorInt_Read(self, *args)
    def __getitem__(self, *args): return _coefficient_repartition_core.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.VectorInt___setitem__(self, *args)
    def __len__(self): return _coefficient_repartition_core.VectorInt___len__(self)
VectorInt_swigregister = _coefficient_repartition_core.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorBool(BaseSeldonVectorBool):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorBool]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBool, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorBool]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_VectorBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_VectorBool
    __del__ = lambda self : None;
    def Clear(self): return _coefficient_repartition_core.VectorBool_Clear(self)
    def Reallocate(self, *args): return _coefficient_repartition_core.VectorBool_Reallocate(self, *args)
    def Resize(self, *args): return _coefficient_repartition_core.VectorBool_Resize(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.VectorBool_SetData(self, *args)
    def Nullify(self): return _coefficient_repartition_core.VectorBool_Nullify(self)
    def __call__(self, *args): return _coefficient_repartition_core.VectorBool___call__(self, *args)
    def Copy(self, *args): return _coefficient_repartition_core.VectorBool_Copy(self, *args)
    def Append(self, *args): return _coefficient_repartition_core.VectorBool_Append(self, *args)
    def GetDataSize(self): return _coefficient_repartition_core.VectorBool_GetDataSize(self)
    def Zero(self): return _coefficient_repartition_core.VectorBool_Zero(self)
    def Fill(self): return _coefficient_repartition_core.VectorBool_Fill(self)
    def FillRand(self): return _coefficient_repartition_core.VectorBool_FillRand(self)
    def Print(self): return _coefficient_repartition_core.VectorBool_Print(self)
    def Write(self, *args): return _coefficient_repartition_core.VectorBool_Write(self, *args)
    def WriteText(self, *args): return _coefficient_repartition_core.VectorBool_WriteText(self, *args)
    def Read(self, *args): return _coefficient_repartition_core.VectorBool_Read(self, *args)
    def __getitem__(self, *args): return _coefficient_repartition_core.VectorBool___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.VectorBool___setitem__(self, *args)
    def __len__(self): return _coefficient_repartition_core.VectorBool___len__(self)
VectorBool_swigregister = _coefficient_repartition_core.VectorBool_swigregister
VectorBool_swigregister(VectorBool)

class DoubleMalloc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMalloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMalloc, name)
    __repr__ = _swig_repr
    def allocate(self, *args): return _coefficient_repartition_core.DoubleMalloc_allocate(self, *args)
    def deallocate(self, *args): return _coefficient_repartition_core.DoubleMalloc_deallocate(self, *args)
    def reallocate(self, *args): return _coefficient_repartition_core.DoubleMalloc_reallocate(self, *args)
    def memoryset(self, *args): return _coefficient_repartition_core.DoubleMalloc_memoryset(self, *args)
    def memorycpy(self, *args): return _coefficient_repartition_core.DoubleMalloc_memorycpy(self, *args)
    def __init__(self): 
        this = _coefficient_repartition_core.new_DoubleMalloc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_DoubleMalloc
    __del__ = lambda self : None;
DoubleMalloc_swigregister = _coefficient_repartition_core.DoubleMalloc_swigregister
DoubleMalloc_swigregister(DoubleMalloc)

class BaseSeldonVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseSeldonVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseSeldonVectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_BaseSeldonVectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_BaseSeldonVectorDouble
    __del__ = lambda self : None;
    def GetM(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetM(self)
    def GetLength(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetLength(self)
    def GetSize(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetSize(self)
    def GetData(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetData(self)
    def GetDataConst(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetDataConst(self)
    def GetDataVoid(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetDataVoid(self)
    def GetDataConstVoid(self): return _coefficient_repartition_core.BaseSeldonVectorDouble_GetDataConstVoid(self)
BaseSeldonVectorDouble_swigregister = _coefficient_repartition_core.BaseSeldonVectorDouble_swigregister
BaseSeldonVectorDouble_swigregister(BaseSeldonVectorDouble)

class VectorDouble(BaseSeldonVectorDouble):
    __swig_setmethods__ = {}
    for _s in [BaseSeldonVectorDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseSeldonVectorDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_VectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_VectorDouble
    __del__ = lambda self : None;
    def Clear(self): return _coefficient_repartition_core.VectorDouble_Clear(self)
    def Reallocate(self, *args): return _coefficient_repartition_core.VectorDouble_Reallocate(self, *args)
    def Resize(self, *args): return _coefficient_repartition_core.VectorDouble_Resize(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.VectorDouble_SetData(self, *args)
    def Nullify(self): return _coefficient_repartition_core.VectorDouble_Nullify(self)
    def __call__(self, *args): return _coefficient_repartition_core.VectorDouble___call__(self, *args)
    def Copy(self, *args): return _coefficient_repartition_core.VectorDouble_Copy(self, *args)
    def Append(self, *args): return _coefficient_repartition_core.VectorDouble_Append(self, *args)
    def GetDataSize(self): return _coefficient_repartition_core.VectorDouble_GetDataSize(self)
    def Zero(self): return _coefficient_repartition_core.VectorDouble_Zero(self)
    def Fill(self): return _coefficient_repartition_core.VectorDouble_Fill(self)
    def FillRand(self): return _coefficient_repartition_core.VectorDouble_FillRand(self)
    def Print(self): return _coefficient_repartition_core.VectorDouble_Print(self)
    def Write(self, *args): return _coefficient_repartition_core.VectorDouble_Write(self, *args)
    def WriteText(self, *args): return _coefficient_repartition_core.VectorDouble_WriteText(self, *args)
    def Read(self, *args): return _coefficient_repartition_core.VectorDouble_Read(self, *args)
    def __getitem__(self, *args): return _coefficient_repartition_core.VectorDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.VectorDouble___setitem__(self, *args)
    def __len__(self): return _coefficient_repartition_core.VectorDouble___len__(self)
VectorDouble_swigregister = _coefficient_repartition_core.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixBaseInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixBaseInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixBaseInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixBaseInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixBaseInt
    __del__ = lambda self : None;
    def GetM(self, *args): return _coefficient_repartition_core.MatrixBaseInt_GetM(self, *args)
    def GetN(self, *args): return _coefficient_repartition_core.MatrixBaseInt_GetN(self, *args)
    def GetSize(self): return _coefficient_repartition_core.MatrixBaseInt_GetSize(self)
    def GetData(self): return _coefficient_repartition_core.MatrixBaseInt_GetData(self)
    def GetDataConst(self): return _coefficient_repartition_core.MatrixBaseInt_GetDataConst(self)
    def GetDataVoid(self): return _coefficient_repartition_core.MatrixBaseInt_GetDataVoid(self)
    def GetDataConstVoid(self): return _coefficient_repartition_core.MatrixBaseInt_GetDataConstVoid(self)
MatrixBaseInt_swigregister = _coefficient_repartition_core.MatrixBaseInt_swigregister
MatrixBaseInt_swigregister(MatrixBaseInt)

class MatrixPointersInt(MatrixBaseInt):
    __swig_setmethods__ = {}
    for _s in [MatrixBaseInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPointersInt, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPointersInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixPointersInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixPointersInt
    __del__ = lambda self : None;
    def Clear(self): return _coefficient_repartition_core.MatrixPointersInt_Clear(self)
    def GetDataSize(self): return _coefficient_repartition_core.MatrixPointersInt_GetDataSize(self)
    def Reallocate(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Reallocate(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.MatrixPointersInt_SetData(self, *args)
    def Nullify(self): return _coefficient_repartition_core.MatrixPointersInt_Nullify(self)
    def Resize(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Resize(self, *args)
    def __call__(self, *args): return _coefficient_repartition_core.MatrixPointersInt___call__(self, *args)
    def Val(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Val(self, *args)
    def Copy(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Copy(self, *args)
    def GetLD(self): return _coefficient_repartition_core.MatrixPointersInt_GetLD(self)
    def Zero(self): return _coefficient_repartition_core.MatrixPointersInt_Zero(self)
    def SetIdentity(self): return _coefficient_repartition_core.MatrixPointersInt_SetIdentity(self)
    def Fill(self): return _coefficient_repartition_core.MatrixPointersInt_Fill(self)
    def FillRand(self): return _coefficient_repartition_core.MatrixPointersInt_FillRand(self)
    def Print(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Print(self, *args)
    def Write(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Write(self, *args)
    def WriteText(self, *args): return _coefficient_repartition_core.MatrixPointersInt_WriteText(self, *args)
    def Read(self, *args): return _coefficient_repartition_core.MatrixPointersInt_Read(self, *args)
MatrixPointersInt_swigregister = _coefficient_repartition_core.MatrixPointersInt_swigregister
MatrixPointersInt_swigregister(MatrixPointersInt)

class MatrixInt(MatrixPointersInt):
    __swig_setmethods__ = {}
    for _s in [MatrixPointersInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPointersInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _coefficient_repartition_core.MatrixInt___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.MatrixInt___setitem__(self, *args)
    def __len__(self): return _coefficient_repartition_core.MatrixInt___len__(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixInt
    __del__ = lambda self : None;
MatrixInt_swigregister = _coefficient_repartition_core.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixBaseDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixBaseDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixBaseDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixBaseDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixBaseDouble
    __del__ = lambda self : None;
    def GetM(self, *args): return _coefficient_repartition_core.MatrixBaseDouble_GetM(self, *args)
    def GetN(self, *args): return _coefficient_repartition_core.MatrixBaseDouble_GetN(self, *args)
    def GetSize(self): return _coefficient_repartition_core.MatrixBaseDouble_GetSize(self)
    def GetData(self): return _coefficient_repartition_core.MatrixBaseDouble_GetData(self)
    def GetDataConst(self): return _coefficient_repartition_core.MatrixBaseDouble_GetDataConst(self)
    def GetDataVoid(self): return _coefficient_repartition_core.MatrixBaseDouble_GetDataVoid(self)
    def GetDataConstVoid(self): return _coefficient_repartition_core.MatrixBaseDouble_GetDataConstVoid(self)
MatrixBaseDouble_swigregister = _coefficient_repartition_core.MatrixBaseDouble_swigregister
MatrixBaseDouble_swigregister(MatrixBaseDouble)

class MatrixPointersDouble(MatrixBaseDouble):
    __swig_setmethods__ = {}
    for _s in [MatrixBaseDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPointersDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixBaseDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPointersDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixPointersDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixPointersDouble
    __del__ = lambda self : None;
    def Clear(self): return _coefficient_repartition_core.MatrixPointersDouble_Clear(self)
    def GetDataSize(self): return _coefficient_repartition_core.MatrixPointersDouble_GetDataSize(self)
    def Reallocate(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Reallocate(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_SetData(self, *args)
    def Nullify(self): return _coefficient_repartition_core.MatrixPointersDouble_Nullify(self)
    def Resize(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Resize(self, *args)
    def __call__(self, *args): return _coefficient_repartition_core.MatrixPointersDouble___call__(self, *args)
    def Val(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Val(self, *args)
    def Copy(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Copy(self, *args)
    def GetLD(self): return _coefficient_repartition_core.MatrixPointersDouble_GetLD(self)
    def Zero(self): return _coefficient_repartition_core.MatrixPointersDouble_Zero(self)
    def SetIdentity(self): return _coefficient_repartition_core.MatrixPointersDouble_SetIdentity(self)
    def Fill(self): return _coefficient_repartition_core.MatrixPointersDouble_Fill(self)
    def FillRand(self): return _coefficient_repartition_core.MatrixPointersDouble_FillRand(self)
    def Print(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Print(self, *args)
    def Write(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Write(self, *args)
    def WriteText(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_WriteText(self, *args)
    def Read(self, *args): return _coefficient_repartition_core.MatrixPointersDouble_Read(self, *args)
MatrixPointersDouble_swigregister = _coefficient_repartition_core.MatrixPointersDouble_swigregister
MatrixPointersDouble_swigregister(MatrixPointersDouble)

class MatrixDouble(MatrixPointersDouble):
    __swig_setmethods__ = {}
    for _s in [MatrixPointersDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixPointersDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_MatrixDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _coefficient_repartition_core.MatrixDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.MatrixDouble___setitem__(self, *args)
    def __len__(self): return _coefficient_repartition_core.MatrixDouble___len__(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_MatrixDouble
    __del__ = lambda self : None;
MatrixDouble_swigregister = _coefficient_repartition_core.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)


def GetRowDouble(*args):
  return _coefficient_repartition_core.GetRowDouble(*args)
GetRowDouble = _coefficient_repartition_core.GetRowDouble

def SetRowDouble(*args):
  return _coefficient_repartition_core.SetRowDouble(*args)
SetRowDouble = _coefficient_repartition_core.SetRowDouble
class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _coefficient_repartition_core.ios_base_erase_event
    imbue_event = _coefficient_repartition_core.ios_base_imbue_event
    copyfmt_event = _coefficient_repartition_core.ios_base_copyfmt_event
    def register_callback(self, *args): return _coefficient_repartition_core.ios_base_register_callback(self, *args)
    def flags(self, *args): return _coefficient_repartition_core.ios_base_flags(self, *args)
    def setf(self, *args): return _coefficient_repartition_core.ios_base_setf(self, *args)
    def unsetf(self, *args): return _coefficient_repartition_core.ios_base_unsetf(self, *args)
    def precision(self, *args): return _coefficient_repartition_core.ios_base_precision(self, *args)
    def width(self, *args): return _coefficient_repartition_core.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _coefficient_repartition_core.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_coefficient_repartition_core.ios_base_sync_with_stdio)
    def imbue(self, *args): return _coefficient_repartition_core.ios_base_imbue(self, *args)
    def getloc(self): return _coefficient_repartition_core.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _coefficient_repartition_core.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_coefficient_repartition_core.ios_base_xalloc)
    def iword(self, *args): return _coefficient_repartition_core.ios_base_iword(self, *args)
    def pword(self, *args): return _coefficient_repartition_core.ios_base_pword(self, *args)
    __swig_destroy__ = _coefficient_repartition_core.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _coefficient_repartition_core.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _coefficient_repartition_core.cvar
ios_base.boolalpha = _coefficient_repartition_core.cvar.ios_base_boolalpha
ios_base.dec = _coefficient_repartition_core.cvar.ios_base_dec
ios_base.fixed = _coefficient_repartition_core.cvar.ios_base_fixed
ios_base.hex = _coefficient_repartition_core.cvar.ios_base_hex
ios_base.internal = _coefficient_repartition_core.cvar.ios_base_internal
ios_base.left = _coefficient_repartition_core.cvar.ios_base_left
ios_base.oct = _coefficient_repartition_core.cvar.ios_base_oct
ios_base.right = _coefficient_repartition_core.cvar.ios_base_right
ios_base.scientific = _coefficient_repartition_core.cvar.ios_base_scientific
ios_base.showbase = _coefficient_repartition_core.cvar.ios_base_showbase
ios_base.showpoint = _coefficient_repartition_core.cvar.ios_base_showpoint
ios_base.showpos = _coefficient_repartition_core.cvar.ios_base_showpos
ios_base.skipws = _coefficient_repartition_core.cvar.ios_base_skipws
ios_base.unitbuf = _coefficient_repartition_core.cvar.ios_base_unitbuf
ios_base.uppercase = _coefficient_repartition_core.cvar.ios_base_uppercase
ios_base.adjustfield = _coefficient_repartition_core.cvar.ios_base_adjustfield
ios_base.basefield = _coefficient_repartition_core.cvar.ios_base_basefield
ios_base.floatfield = _coefficient_repartition_core.cvar.ios_base_floatfield
ios_base.badbit = _coefficient_repartition_core.cvar.ios_base_badbit
ios_base.eofbit = _coefficient_repartition_core.cvar.ios_base_eofbit
ios_base.failbit = _coefficient_repartition_core.cvar.ios_base_failbit
ios_base.goodbit = _coefficient_repartition_core.cvar.ios_base_goodbit
ios_base.app = _coefficient_repartition_core.cvar.ios_base_app
ios_base.ate = _coefficient_repartition_core.cvar.ios_base_ate
ios_base.binary = _coefficient_repartition_core.cvar.ios_base_binary
ios_base.ios_base_in = _coefficient_repartition_core.cvar.ios_base_ios_base_in
ios_base.out = _coefficient_repartition_core.cvar.ios_base_out
ios_base.trunc = _coefficient_repartition_core.cvar.ios_base_trunc
ios_base.beg = _coefficient_repartition_core.cvar.ios_base_beg
ios_base.cur = _coefficient_repartition_core.cvar.ios_base_cur
ios_base.end = _coefficient_repartition_core.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  return _coefficient_repartition_core.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _coefficient_repartition_core.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _coefficient_repartition_core.ios_base_xalloc()
ios_base_xalloc = _coefficient_repartition_core.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _coefficient_repartition_core.ios_rdstate(self)
    def clear(self, *args): return _coefficient_repartition_core.ios_clear(self, *args)
    def setstate(self, *args): return _coefficient_repartition_core.ios_setstate(self, *args)
    def good(self): return _coefficient_repartition_core.ios_good(self)
    def eof(self): return _coefficient_repartition_core.ios_eof(self)
    def fail(self): return _coefficient_repartition_core.ios_fail(self)
    def bad(self): return _coefficient_repartition_core.ios_bad(self)
    def exceptions(self, *args): return _coefficient_repartition_core.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _coefficient_repartition_core.ios_tie(self, *args)
    def rdbuf(self, *args): return _coefficient_repartition_core.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _coefficient_repartition_core.ios_copyfmt(self, *args)
    def fill(self, *args): return _coefficient_repartition_core.ios_fill(self, *args)
    def imbue(self, *args): return _coefficient_repartition_core.ios_imbue(self, *args)
    def narrow(self, *args): return _coefficient_repartition_core.ios_narrow(self, *args)
    def widen(self, *args): return _coefficient_repartition_core.ios_widen(self, *args)
ios_swigregister = _coefficient_repartition_core.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _coefficient_repartition_core.ostream___lshift__(self, *args)
    def put(self, *args): return _coefficient_repartition_core.ostream_put(self, *args)
    def write(self, *args): return _coefficient_repartition_core.ostream_write(self, *args)
    def flush(self): return _coefficient_repartition_core.ostream_flush(self)
    def tellp(self): return _coefficient_repartition_core.ostream_tellp(self)
    def seekp(self, *args): return _coefficient_repartition_core.ostream_seekp(self, *args)
ostream_swigregister = _coefficient_repartition_core.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _coefficient_repartition_core.istream___rshift__(self, *args)
    def gcount(self): return _coefficient_repartition_core.istream_gcount(self)
    def get(self, *args): return _coefficient_repartition_core.istream_get(self, *args)
    def getline(self, *args): return _coefficient_repartition_core.istream_getline(self, *args)
    def ignore(self, *args): return _coefficient_repartition_core.istream_ignore(self, *args)
    def peek(self): return _coefficient_repartition_core.istream_peek(self)
    def read(self, *args): return _coefficient_repartition_core.istream_read(self, *args)
    def readsome(self, *args): return _coefficient_repartition_core.istream_readsome(self, *args)
    def putback(self, *args): return _coefficient_repartition_core.istream_putback(self, *args)
    def unget(self): return _coefficient_repartition_core.istream_unget(self)
    def sync(self): return _coefficient_repartition_core.istream_sync(self)
    def tellg(self): return _coefficient_repartition_core.istream_tellg(self)
    def seekg(self, *args): return _coefficient_repartition_core.istream_seekg(self, *args)
istream_swigregister = _coefficient_repartition_core.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _coefficient_repartition_core.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _coefficient_repartition_core.endl_cb_ptr

def endl(*args):
  return _coefficient_repartition_core.endl(*args)
endl = _coefficient_repartition_core.endl
ends_cb_ptr = _coefficient_repartition_core.ends_cb_ptr

def ends(*args):
  return _coefficient_repartition_core.ends(*args)
ends = _coefficient_repartition_core.ends
flush_cb_ptr = _coefficient_repartition_core.flush_cb_ptr

def flush(*args):
  return _coefficient_repartition_core.flush(*args)
flush = _coefficient_repartition_core.flush
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _coefficient_repartition_core.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _coefficient_repartition_core.SwigPyIterator_value(self)
    def incr(self, n = 1): return _coefficient_repartition_core.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _coefficient_repartition_core.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _coefficient_repartition_core.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _coefficient_repartition_core.SwigPyIterator_equal(self, *args)
    def copy(self): return _coefficient_repartition_core.SwigPyIterator_copy(self)
    def next(self): return _coefficient_repartition_core.SwigPyIterator_next(self)
    def __next__(self): return _coefficient_repartition_core.SwigPyIterator___next__(self)
    def previous(self): return _coefficient_repartition_core.SwigPyIterator_previous(self)
    def advance(self, *args): return _coefficient_repartition_core.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _coefficient_repartition_core.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _coefficient_repartition_core.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _coefficient_repartition_core.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _coefficient_repartition_core.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _coefficient_repartition_core.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _coefficient_repartition_core.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _coefficient_repartition_core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr
    def iterator(self): return _coefficient_repartition_core.vector_int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _coefficient_repartition_core.vector_int___nonzero__(self)
    def __bool__(self): return _coefficient_repartition_core.vector_int___bool__(self)
    def __len__(self): return _coefficient_repartition_core.vector_int___len__(self)
    def pop(self): return _coefficient_repartition_core.vector_int_pop(self)
    def __getslice__(self, *args): return _coefficient_repartition_core.vector_int___getslice__(self, *args)
    def __setslice__(self, *args): return _coefficient_repartition_core.vector_int___setslice__(self, *args)
    def __delslice__(self, *args): return _coefficient_repartition_core.vector_int___delslice__(self, *args)
    def __delitem__(self, *args): return _coefficient_repartition_core.vector_int___delitem__(self, *args)
    def __getitem__(self, *args): return _coefficient_repartition_core.vector_int___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.vector_int___setitem__(self, *args)
    def append(self, *args): return _coefficient_repartition_core.vector_int_append(self, *args)
    def empty(self): return _coefficient_repartition_core.vector_int_empty(self)
    def size(self): return _coefficient_repartition_core.vector_int_size(self)
    def clear(self): return _coefficient_repartition_core.vector_int_clear(self)
    def swap(self, *args): return _coefficient_repartition_core.vector_int_swap(self, *args)
    def get_allocator(self): return _coefficient_repartition_core.vector_int_get_allocator(self)
    def begin(self): return _coefficient_repartition_core.vector_int_begin(self)
    def end(self): return _coefficient_repartition_core.vector_int_end(self)
    def rbegin(self): return _coefficient_repartition_core.vector_int_rbegin(self)
    def rend(self): return _coefficient_repartition_core.vector_int_rend(self)
    def pop_back(self): return _coefficient_repartition_core.vector_int_pop_back(self)
    def erase(self, *args): return _coefficient_repartition_core.vector_int_erase(self, *args)
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_vector_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _coefficient_repartition_core.vector_int_push_back(self, *args)
    def front(self): return _coefficient_repartition_core.vector_int_front(self)
    def back(self): return _coefficient_repartition_core.vector_int_back(self)
    def assign(self, *args): return _coefficient_repartition_core.vector_int_assign(self, *args)
    def resize(self, *args): return _coefficient_repartition_core.vector_int_resize(self, *args)
    def insert(self, *args): return _coefficient_repartition_core.vector_int_insert(self, *args)
    def reserve(self, *args): return _coefficient_repartition_core.vector_int_reserve(self, *args)
    def capacity(self): return _coefficient_repartition_core.vector_int_capacity(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_vector_int
    __del__ = lambda self : None;
vector_int_swigregister = _coefficient_repartition_core.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_str(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_str, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_str, name)
    __repr__ = _swig_repr
    def iterator(self): return _coefficient_repartition_core.vector_str_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _coefficient_repartition_core.vector_str___nonzero__(self)
    def __bool__(self): return _coefficient_repartition_core.vector_str___bool__(self)
    def __len__(self): return _coefficient_repartition_core.vector_str___len__(self)
    def pop(self): return _coefficient_repartition_core.vector_str_pop(self)
    def __getslice__(self, *args): return _coefficient_repartition_core.vector_str___getslice__(self, *args)
    def __setslice__(self, *args): return _coefficient_repartition_core.vector_str___setslice__(self, *args)
    def __delslice__(self, *args): return _coefficient_repartition_core.vector_str___delslice__(self, *args)
    def __delitem__(self, *args): return _coefficient_repartition_core.vector_str___delitem__(self, *args)
    def __getitem__(self, *args): return _coefficient_repartition_core.vector_str___getitem__(self, *args)
    def __setitem__(self, *args): return _coefficient_repartition_core.vector_str___setitem__(self, *args)
    def append(self, *args): return _coefficient_repartition_core.vector_str_append(self, *args)
    def empty(self): return _coefficient_repartition_core.vector_str_empty(self)
    def size(self): return _coefficient_repartition_core.vector_str_size(self)
    def clear(self): return _coefficient_repartition_core.vector_str_clear(self)
    def swap(self, *args): return _coefficient_repartition_core.vector_str_swap(self, *args)
    def get_allocator(self): return _coefficient_repartition_core.vector_str_get_allocator(self)
    def begin(self): return _coefficient_repartition_core.vector_str_begin(self)
    def end(self): return _coefficient_repartition_core.vector_str_end(self)
    def rbegin(self): return _coefficient_repartition_core.vector_str_rbegin(self)
    def rend(self): return _coefficient_repartition_core.vector_str_rend(self)
    def pop_back(self): return _coefficient_repartition_core.vector_str_pop_back(self)
    def erase(self, *args): return _coefficient_repartition_core.vector_str_erase(self, *args)
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_vector_str(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _coefficient_repartition_core.vector_str_push_back(self, *args)
    def front(self): return _coefficient_repartition_core.vector_str_front(self)
    def back(self): return _coefficient_repartition_core.vector_str_back(self)
    def assign(self, *args): return _coefficient_repartition_core.vector_str_assign(self, *args)
    def resize(self, *args): return _coefficient_repartition_core.vector_str_resize(self, *args)
    def insert(self, *args): return _coefficient_repartition_core.vector_str_insert(self, *args)
    def reserve(self, *args): return _coefficient_repartition_core.vector_str_reserve(self, *args)
    def capacity(self): return _coefficient_repartition_core.vector_str_capacity(self)
    __swig_destroy__ = _coefficient_repartition_core.delete_vector_str
    __del__ = lambda self : None;
vector_str_swigregister = _coefficient_repartition_core.vector_str_swigregister
vector_str_swigregister(vector_str)

MPI2 = _coefficient_repartition_core.MPI2
NETCDF = _coefficient_repartition_core.NETCDF
PI_6 = _coefficient_repartition_core.PI_6
INV_PI_6 = _coefficient_repartition_core.INV_PI_6
FRAC3 = _coefficient_repartition_core.FRAC3
class CoefficientRepartitionBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoefficientRepartitionBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoefficientRepartitionBase, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Init"] = lambda x: _coefficient_repartition_core.CoefficientRepartitionBase_Init
    if _newclass:Init = staticmethod(_coefficient_repartition_core.CoefficientRepartitionBase_Init)
    def __init__(self): 
        this = _coefficient_repartition_core.new_CoefficientRepartitionBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_CoefficientRepartitionBase
    __del__ = lambda self : None;
    __swig_getmethods__["GetRank"] = lambda x: _coefficient_repartition_core.CoefficientRepartitionBase_GetRank
    if _newclass:GetRank = staticmethod(_coefficient_repartition_core.CoefficientRepartitionBase_GetRank)
    __swig_getmethods__["GetNrank"] = lambda x: _coefficient_repartition_core.CoefficientRepartitionBase_GetNrank
    if _newclass:GetNrank = staticmethod(_coefficient_repartition_core.CoefficientRepartitionBase_GetNrank)
    __swig_getmethods__["GetNs"] = lambda x: _coefficient_repartition_core.CoefficientRepartitionBase_GetNs
    if _newclass:GetNs = staticmethod(_coefficient_repartition_core.CoefficientRepartitionBase_GetNs)
    __swig_getmethods__["GetDensity"] = lambda x: _coefficient_repartition_core.CoefficientRepartitionBase_GetDensity
    if _newclass:GetDensity = staticmethod(_coefficient_repartition_core.CoefficientRepartitionBase_GetDensity)
CoefficientRepartitionBase_swigregister = _coefficient_repartition_core.CoefficientRepartitionBase_swigregister
CoefficientRepartitionBase_swigregister(CoefficientRepartitionBase)

def CoefficientRepartitionBase_Init(*args):
  return _coefficient_repartition_core.CoefficientRepartitionBase_Init(*args)
CoefficientRepartitionBase_Init = _coefficient_repartition_core.CoefficientRepartitionBase_Init

def CoefficientRepartitionBase_GetRank():
  return _coefficient_repartition_core.CoefficientRepartitionBase_GetRank()
CoefficientRepartitionBase_GetRank = _coefficient_repartition_core.CoefficientRepartitionBase_GetRank

def CoefficientRepartitionBase_GetNrank():
  return _coefficient_repartition_core.CoefficientRepartitionBase_GetNrank()
CoefficientRepartitionBase_GetNrank = _coefficient_repartition_core.CoefficientRepartitionBase_GetNrank

def CoefficientRepartitionBase_GetNs():
  return _coefficient_repartition_core.CoefficientRepartitionBase_GetNs()
CoefficientRepartitionBase_GetNs = _coefficient_repartition_core.CoefficientRepartitionBase_GetNs

def CoefficientRepartitionBase_GetDensity():
  return _coefficient_repartition_core.CoefficientRepartitionBase_GetDensity()
CoefficientRepartitionBase_GetDensity = _coefficient_repartition_core.CoefficientRepartitionBase_GetDensity

class Particle(CoefficientRepartitionBase):
    __swig_setmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_Particle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_Particle
    __del__ = lambda self : None;
    def GetDiameter(self): return _coefficient_repartition_core.Particle_GetDiameter(self)
    def GetMass(self): return _coefficient_repartition_core.Particle_GetMass(self)
    def GetFractionSpecies(self, *args): return _coefficient_repartition_core.Particle_GetFractionSpecies(self, *args)
    def CollectFraction(self, *args): return _coefficient_repartition_core.Particle_CollectFraction(self, *args)
    def SetData(self, *args): return _coefficient_repartition_core.Particle_SetData(self, *args)
    def Coagulate(self, *args): return _coefficient_repartition_core.Particle_Coagulate(self, *args)
Particle_swigregister = _coefficient_repartition_core.Particle_swigregister
Particle_swigregister(Particle)

class GeneralSection(CoefficientRepartitionBase):
    __swig_setmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralSection, name, value)
    __swig_getmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralSection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _coefficient_repartition_core.new_GeneralSection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_GeneralSection
    __del__ = lambda self : None;
    __swig_getmethods__["Init"] = lambda x: _coefficient_repartition_core.GeneralSection_Init
    if _newclass:Init = staticmethod(_coefficient_repartition_core.GeneralSection_Init)
    def Copy(self, *args): return _coefficient_repartition_core.GeneralSection_Copy(self, *args)
    def GetNd(self): return _coefficient_repartition_core.GeneralSection_GetNd(self)
    def GetSizeBin(self): return _coefficient_repartition_core.GeneralSection_GetSizeBin(self)
    def GetCompositionBin(self): return _coefficient_repartition_core.GeneralSection_GetCompositionBin(self)
    def GetMassBoundary(self, *args): return _coefficient_repartition_core.GeneralSection_GetMassBoundary(self, *args)
    def GetDiameterBoundary(self, *args): return _coefficient_repartition_core.GeneralSection_GetDiameterBoundary(self, *args)
    def CollectFractionIndexBoundary(self, *args): return _coefficient_repartition_core.GeneralSection_CollectFractionIndexBoundary(self, *args)
    def CollectFractionBoundary(self, *args): return _coefficient_repartition_core.GeneralSection_CollectFractionBoundary(self, *args)
    __swig_getmethods__["GetNdStatic"] = lambda x: _coefficient_repartition_core.GeneralSection_GetNdStatic
    if _newclass:GetNdStatic = staticmethod(_coefficient_repartition_core.GeneralSection_GetNdStatic)
    __swig_getmethods__["GetNb"] = lambda x: _coefficient_repartition_core.GeneralSection_GetNb
    if _newclass:GetNb = staticmethod(_coefficient_repartition_core.GeneralSection_GetNb)
    __swig_getmethods__["GetNc"] = lambda x: _coefficient_repartition_core.GeneralSection_GetNc
    if _newclass:GetNc = staticmethod(_coefficient_repartition_core.GeneralSection_GetNc)
    __swig_getmethods__["CollectDiameter"] = lambda x: _coefficient_repartition_core.GeneralSection_CollectDiameter
    if _newclass:CollectDiameter = staticmethod(_coefficient_repartition_core.GeneralSection_CollectDiameter)
    __swig_getmethods__["CollectMass"] = lambda x: _coefficient_repartition_core.GeneralSection_CollectMass
    if _newclass:CollectMass = staticmethod(_coefficient_repartition_core.GeneralSection_CollectMass)
    __swig_getmethods__["CollectFractionIndexBoundaryStatic"] = lambda x: _coefficient_repartition_core.GeneralSection_CollectFractionIndexBoundaryStatic
    if _newclass:CollectFractionIndexBoundaryStatic = staticmethod(_coefficient_repartition_core.GeneralSection_CollectFractionIndexBoundaryStatic)
    __swig_getmethods__["CollectFractionBoundaryStatic"] = lambda x: _coefficient_repartition_core.GeneralSection_CollectFractionBoundaryStatic
    if _newclass:CollectFractionBoundaryStatic = staticmethod(_coefficient_repartition_core.GeneralSection_CollectFractionBoundaryStatic)
    def GenerateRandomParticle(self, *args): return _coefficient_repartition_core.GeneralSection_GenerateRandomParticle(self, *args)
    def HasParticle(self, *args): return _coefficient_repartition_core.GeneralSection_HasParticle(self, *args)
GeneralSection_swigregister = _coefficient_repartition_core.GeneralSection_swigregister
GeneralSection_swigregister(GeneralSection)

def GeneralSection_Init(type = "default"):
  return _coefficient_repartition_core.GeneralSection_Init(type)
GeneralSection_Init = _coefficient_repartition_core.GeneralSection_Init

def GeneralSection_GetNdStatic(*args):
  return _coefficient_repartition_core.GeneralSection_GetNdStatic(*args)
GeneralSection_GetNdStatic = _coefficient_repartition_core.GeneralSection_GetNdStatic

def GeneralSection_GetNb():
  return _coefficient_repartition_core.GeneralSection_GetNb()
GeneralSection_GetNb = _coefficient_repartition_core.GeneralSection_GetNb

def GeneralSection_GetNc():
  return _coefficient_repartition_core.GeneralSection_GetNc()
GeneralSection_GetNc = _coefficient_repartition_core.GeneralSection_GetNc

def GeneralSection_CollectDiameter(*args):
  return _coefficient_repartition_core.GeneralSection_CollectDiameter(*args)
GeneralSection_CollectDiameter = _coefficient_repartition_core.GeneralSection_CollectDiameter

def GeneralSection_CollectMass(*args):
  return _coefficient_repartition_core.GeneralSection_CollectMass(*args)
GeneralSection_CollectMass = _coefficient_repartition_core.GeneralSection_CollectMass

def GeneralSection_CollectFractionIndexBoundaryStatic(*args):
  return _coefficient_repartition_core.GeneralSection_CollectFractionIndexBoundaryStatic(*args)
GeneralSection_CollectFractionIndexBoundaryStatic = _coefficient_repartition_core.GeneralSection_CollectFractionIndexBoundaryStatic

def GeneralSection_CollectFractionBoundaryStatic(*args):
  return _coefficient_repartition_core.GeneralSection_CollectFractionBoundaryStatic(*args)
GeneralSection_CollectFractionBoundaryStatic = _coefficient_repartition_core.GeneralSection_CollectFractionBoundaryStatic

class CoefficientRepartition(CoefficientRepartitionBase):
    __swig_setmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoefficientRepartition, name, value)
    __swig_getmethods__ = {}
    for _s in [CoefficientRepartitionBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoefficientRepartition, name)
    __repr__ = _swig_repr
    def __init__(self, type = "default", Nmc = 100000): 
        this = _coefficient_repartition_core.new_CoefficientRepartition(type, Nmc)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coefficient_repartition_core.delete_CoefficientRepartition
    __del__ = lambda self : None;
    def GetNcompute(self): return _coefficient_repartition_core.CoefficientRepartition_GetNcompute(self)
    def GetNsize(self): return _coefficient_repartition_core.CoefficientRepartition_GetNsize(self)
    def GetNmc(self): return _coefficient_repartition_core.CoefficientRepartition_GetNmc(self)
    def GetGeneralSection(self, *args): return _coefficient_repartition_core.CoefficientRepartition_GetGeneralSection(self, *args)
    def CollectIndexFirst(self, *args): return _coefficient_repartition_core.CoefficientRepartition_CollectIndexFirst(self, *args)
    def CollectIndexSecond(self, *args): return _coefficient_repartition_core.CoefficientRepartition_CollectIndexSecond(self, *args)
    def CollectCoefficient(self, *args): return _coefficient_repartition_core.CoefficientRepartition_CollectCoefficient(self, *args)
    def Clear(self): return _coefficient_repartition_core.CoefficientRepartition_Clear(self)
    def Compute(self, *args): return _coefficient_repartition_core.CoefficientRepartition_Compute(self, *args)
    def ComputeAll(self): return _coefficient_repartition_core.CoefficientRepartition_ComputeAll(self)
    def ReadNetCDF(self, *args): return _coefficient_repartition_core.CoefficientRepartition_ReadNetCDF(self, *args)
    def WriteNetCDF(self, *args): return _coefficient_repartition_core.CoefficientRepartition_WriteNetCDF(self, *args)
    def WriteTXT(self, *args): return _coefficient_repartition_core.CoefficientRepartition_WriteTXT(self, *args)
    def WriteBIN(self, *args): return _coefficient_repartition_core.CoefficientRepartition_WriteBIN(self, *args)
CoefficientRepartition_swigregister = _coefficient_repartition_core.CoefficientRepartition_swigregister
CoefficientRepartition_swigregister(CoefficientRepartition)

# This file is compatible with both classic and new-style classes.


