#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2015, ENPC
#     Author(s): Sylvain Dor√©
#
# This file is part of the air quality modeling system Polyphemus.
#
# Polyphemus is developed in the INRIA project-team CLIME and in
# the ENPC - EDF R&D joint laboratory CEREA.
#
# Polyphemus is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Polyphemus is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# For more information, visit the Polyphemus web site:
#      http://cerea.enpc.fr/polyphemus/

import numpy as np
import numpy.ma as ma
import pytest
from _pytest.tmpdir import tmpdir, tmpdir_factory


@pytest.fixture
def tmprundir(request):
    """Runs tests from a temporary directory generated by the fixture 'tmpdir'.

    Each test has its own empty temporary directory, as with the 'tmpdir'
    fixture. The difference with 'tmpdir' is that 'tmprundir' is the current
    directory when entering the test.
    """
    tmprundir = tmpdir(request, tmpdir_factory(request))
    cwd = tmprundir.chdir()

    def cleanup():
        cwd.chdir()

    request.addfinalizer(cleanup)
    return tmprundir


def recursive_equal(current, expected, comp=np.allclose):
    """Compares two values that can be, or contain, real numbers.

    @type current: a number, a type compatible with a numpy array of
      numbers, or a dictionary of them and of strings.
    @param current: The value to be tested.

    @type current: a number, a type compatible with a numpy array of
      numbers, or a dictionary of them and of strings.
    @param expected: The reference value.

    @type rel_tolerance: real number
    @param rel_tolerance: The relative difference tolerance.

    @type abs_tolerance: real number
    @param abs_tolerance: The absolute difference tolerance.

    @rtype: boolean
    @return: True if 'current' is an approximation of 'expected'.
    """
    if type(current) is dict and type(expected) is dict:
        if set(current.keys()) ^ set(expected.keys()):
            return False
        for current_val, expected_val in zip(current.values(),
                                             expected.values()):
            if not recursive_equal(current_val, expected_val, comp):
                return False
        return True
    elif type(current) in (str, unicode) and \
         type(expected) in (str, unicode):
        return current == expected
    elif type(current) == ma.core.MaskedArray and \
         type(expected) == ma.core.MaskedArray:
        if np.any(current.mask != expected.mask):
            return False
        current = current[~current.mask]
        expected = expected[~expected.mask]
    return np.all(comp(current, expected))
